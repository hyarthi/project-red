// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "base.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace red {
namespace hooks {
namespace messages {

namespace {

const ::google::protobuf::Descriptor* Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_reflection_ = NULL;
struct ResponseOneofInstance {
  const ::red::hooks::messages::NoteInfo* noteinfo_;
  const ::red::hooks::messages::Note* note_;
  const ::red::hooks::messages::NoteCollection* ncollection_;
}* Response_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
struct RequestOneofInstance {
  const ::red::hooks::messages::RequestNoteInfo* noteinfo_;
  const ::red::hooks::messages::RequestNote* note_;
  const ::red::hooks::messages::RequestNoteCollection* ncollection_;
}* Request_default_oneof_instance_ = NULL;

}  // namespace


void protobuf_AssignDesc_base_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_base_2eproto() {
  protobuf_AddDesc_base_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "base.proto");
  GOOGLE_CHECK(file != NULL);
  Response_descriptor_ = file->message_type(0);
  static const int Response_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, status_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Response_default_oneof_instance_, noteinfo_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Response_default_oneof_instance_, note_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Response_default_oneof_instance_, ncollection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, payload_),
  };
  Response_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Response_descriptor_,
      Response::internal_default_instance(),
      Response_offsets_,
      -1,
      -1,
      -1,
      Response_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _oneof_case_[0]),
      sizeof(Response),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _internal_metadata_));
  Request_descriptor_ = file->message_type(1);
  static const int Request_offsets_[4] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, noteinfo_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, note_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, ncollection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, payload_),
  };
  Request_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_descriptor_,
      Request::internal_default_instance(),
      Request_offsets_,
      -1,
      -1,
      -1,
      Request_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _oneof_case_[0]),
      sizeof(Request),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_base_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Response_descriptor_, Response::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_descriptor_, Request::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_base_2eproto() {
  Response_default_instance_.Shutdown();
  delete Response_default_oneof_instance_;
  delete Response_reflection_;
  Request_default_instance_.Shutdown();
  delete Request_default_oneof_instance_;
  delete Request_reflection_;
}

void protobuf_InitDefaults_base_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::red::hooks::messages::protobuf_InitDefaults_notes_2eproto();
  Response_default_instance_.DefaultConstruct();
  Response_default_oneof_instance_ = new ResponseOneofInstance();
  Request_default_instance_.DefaultConstruct();
  Request_default_oneof_instance_ = new RequestOneofInstance();
  Response_default_instance_.get_mutable()->InitAsDefaultInstance();
  Request_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_base_2eproto_once_);
void protobuf_InitDefaults_base_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_base_2eproto_once_,
                 &protobuf_InitDefaults_base_2eproto_impl);
}
void protobuf_AddDesc_base_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_base_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nbase.proto\022\022red.hooks.messages\032\013notes."
    "proto\"\302\001\n\010Response\022\016\n\006status\030\001 \001(\r\0220\n\010no"
    "teInfo\030\002 \001(\0132\034.red.hooks.messages.NoteIn"
    "foH\000\022(\n\004note\030\003 \001(\0132\030.red.hooks.messages."
    "NoteH\000\0229\n\013ncollection\030\004 \001(\0132\".red.hooks."
    "messages.NoteCollectionH\000B\t\n\007payloadJ\004\010\005"
    "\020e\"\306\001\n\007Request\0227\n\010noteInfo\030\001 \001(\0132#.red.h"
    "ooks.messages.RequestNoteInfoH\000\022/\n\004note\030"
    "\002 \001(\0132\037.red.hooks.messages.RequestNoteH\000"
    "\022@\n\013ncollection\030\003 \001(\0132).red.hooks.messag"
    "es.RequestNoteCollectionH\000B\t\n\007payloadJ\004\010"
    "\004\020eB%\n org.openntf.red.network.messages\370"
    "\001\001b\006proto3", 490);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "base.proto", &protobuf_RegisterTypes);
  ::red::hooks::messages::protobuf_AddDesc_notes_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_base_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_base_2eproto_once_);
void protobuf_AddDesc_base_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_base_2eproto_once_,
                 &protobuf_AddDesc_base_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_base_2eproto {
  StaticDescriptorInitializer_base_2eproto() {
    protobuf_AddDesc_base_2eproto();
  }
} static_descriptor_initializer_base_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response::kStatusFieldNumber;
const int Response::kNoteInfoFieldNumber;
const int Response::kNoteFieldNumber;
const int Response::kNcollectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response::Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_base_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:red.hooks.messages.Response)
}
Response::Response(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_base_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:red.hooks.messages.Response)
}

void Response::InitAsDefaultInstance() {
  Response_default_oneof_instance_->noteinfo_ = const_cast< ::red::hooks::messages::NoteInfo*>(
      ::red::hooks::messages::NoteInfo::internal_default_instance());
  Response_default_oneof_instance_->note_ = const_cast< ::red::hooks::messages::Note*>(
      ::red::hooks::messages::Note::internal_default_instance());
  Response_default_oneof_instance_->ncollection_ = const_cast< ::red::hooks::messages::NoteCollection*>(
      ::red::hooks::messages::NoteCollection::internal_default_instance());
}

Response::Response(const Response& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:red.hooks.messages.Response)
}

void Response::SharedCtor() {
  status_ = 0u;
  clear_has_payload();
  _cached_size_ = 0;
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:red.hooks.messages.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (has_payload()) {
    clear_payload();
  }
}

void Response::ArenaDtor(void* object) {
  Response* _this = reinterpret_cast< Response* >(object);
  (void)_this;
}
void Response::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_descriptor_;
}

const Response& Response::default_instance() {
  protobuf_InitDefaults_base_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Response> Response_default_instance_;

Response* Response::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Response>(arena);
}

void Response::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:red.hooks.messages.Response)
  switch (payload_case()) {
    case kNoteInfo: {
      if (GetArenaNoVirtual() == NULL) {
        delete payload_.noteinfo_;
      }
      break;
    }
    case kNote: {
      if (GetArenaNoVirtual() == NULL) {
        delete payload_.note_;
      }
      break;
    }
    case kNcollection: {
      if (GetArenaNoVirtual() == NULL) {
        delete payload_.ncollection_;
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:red.hooks.messages.Response)
  status_ = 0u;
  clear_payload();
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:red.hooks.messages.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 status = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_noteInfo;
        break;
      }

      // optional .red.hooks.messages.NoteInfo noteInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_noteInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_noteinfo()));
        } else {
          goto handle_unusual;
        }
        goto after_ncollection;
        break;
      }

      // optional .red.hooks.messages.Note note = 3;
      case 3: {
        if (tag == 26) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_note()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ncollection;
        break;
      }

      // optional .red.hooks.messages.NoteCollection ncollection = 4;
      case 4: {
        if (tag == 34) {
         parse_ncollection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ncollection()));
        } else {
          goto handle_unusual;
        }
       after_ncollection:
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:red.hooks.messages.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:red.hooks.messages.Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:red.hooks.messages.Response)
  // optional uint32 status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->status(), output);
  }

  // optional .red.hooks.messages.NoteInfo noteInfo = 2;
  if (has_noteinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *payload_.noteinfo_, output);
  }

  // optional .red.hooks.messages.Note note = 3;
  if (has_note()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *payload_.note_, output);
  }

  // optional .red.hooks.messages.NoteCollection ncollection = 4;
  if (has_ncollection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *payload_.ncollection_, output);
  }

  // @@protoc_insertion_point(serialize_end:red.hooks.messages.Response)
}

::google::protobuf::uint8* Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:red.hooks.messages.Response)
  // optional uint32 status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->status(), target);
  }

  // optional .red.hooks.messages.NoteInfo noteInfo = 2;
  if (has_noteinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *payload_.noteinfo_, false, target);
  }

  // optional .red.hooks.messages.Note note = 3;
  if (has_note()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *payload_.note_, false, target);
  }

  // optional .red.hooks.messages.NoteCollection ncollection = 4;
  if (has_ncollection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *payload_.ncollection_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:red.hooks.messages.Response)
  return target;
}

size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:red.hooks.messages.Response)
  size_t total_size = 0;

  // optional uint32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());
  }

  switch (payload_case()) {
    // optional .red.hooks.messages.NoteInfo noteInfo = 2;
    case kNoteInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.noteinfo_);
      break;
    }
    // optional .red.hooks.messages.Note note = 3;
    case kNote: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.note_);
      break;
    }
    // optional .red.hooks.messages.NoteCollection ncollection = 4;
    case kNcollection: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.ncollection_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:red.hooks.messages.Response)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:red.hooks.messages.Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:red.hooks.messages.Response)
    UnsafeMergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:red.hooks.messages.Response)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Response::UnsafeMergeFrom(const Response& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.payload_case()) {
    case kNoteInfo: {
      mutable_noteinfo()->::red::hooks::messages::NoteInfo::MergeFrom(from.noteinfo());
      break;
    }
    case kNote: {
      mutable_note()->::red::hooks::messages::Note::MergeFrom(from.note());
      break;
    }
    case kNcollection: {
      mutable_ncollection()->::red::hooks::messages::NoteCollection::MergeFrom(from.ncollection());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:red.hooks.messages.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:red.hooks.messages.Response)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Response::IsInitialized() const {

  return true;
}

void Response::Swap(Response* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Response temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void Response::UnsafeArenaSwap(Response* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Response::InternalSwap(Response* other) {
  std::swap(status_, other->status_);
  std::swap(payload_, other->payload_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_descriptor_;
  metadata.reflection = Response_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Response

// optional uint32 status = 1;
void Response::clear_status() {
  status_ = 0u;
}
::google::protobuf::uint32 Response::status() const {
  // @@protoc_insertion_point(field_get:red.hooks.messages.Response.status)
  return status_;
}
void Response::set_status(::google::protobuf::uint32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:red.hooks.messages.Response.status)
}

// optional .red.hooks.messages.NoteInfo noteInfo = 2;
bool Response::has_noteinfo() const {
  return payload_case() == kNoteInfo;
}
void Response::set_has_noteinfo() {
  _oneof_case_[0] = kNoteInfo;
}
void Response::clear_noteinfo() {
  if (has_noteinfo()) {
    if (GetArenaNoVirtual() == NULL) {
      delete payload_.noteinfo_;
    }
    clear_has_payload();
  }
}
 const ::red::hooks::messages::NoteInfo& Response::noteinfo() const {
  // @@protoc_insertion_point(field_get:red.hooks.messages.Response.noteInfo)
  return has_noteinfo()
      ? *payload_.noteinfo_
      : ::red::hooks::messages::NoteInfo::default_instance();
}
::red::hooks::messages::NoteInfo* Response::mutable_noteinfo() {
  if (!has_noteinfo()) {
    clear_payload();
    set_has_noteinfo();
    payload_.noteinfo_ = 
      ::google::protobuf::Arena::CreateMessage< ::red::hooks::messages::NoteInfo >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:red.hooks.messages.Response.noteInfo)
  return payload_.noteinfo_;
}
::red::hooks::messages::NoteInfo* Response::release_noteinfo() {
  // @@protoc_insertion_point(field_release:red.hooks.messages.Response.noteInfo)
  if (has_noteinfo()) {
    clear_has_payload();
    if (GetArenaNoVirtual() != NULL) {
      ::red::hooks::messages::NoteInfo* temp = new ::red::hooks::messages::NoteInfo(*payload_.noteinfo_);
      payload_.noteinfo_ = NULL;
      return temp;
    } else {
      ::red::hooks::messages::NoteInfo* temp = payload_.noteinfo_;
      payload_.noteinfo_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void Response::set_allocated_noteinfo(::red::hooks::messages::NoteInfo* noteinfo) {
  clear_payload();
  if (noteinfo) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(noteinfo) == NULL) {
      GetArenaNoVirtual()->Own(noteinfo);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(noteinfo)) {
      ::red::hooks::messages::NoteInfo* new_noteinfo = 
          ::google::protobuf::Arena::CreateMessage< ::red::hooks::messages::NoteInfo >(
          GetArenaNoVirtual());
      new_noteinfo->CopyFrom(*noteinfo);
      noteinfo = new_noteinfo;
    }
    set_has_noteinfo();
    payload_.noteinfo_ = noteinfo;
  }
  // @@protoc_insertion_point(field_set_allocated:red.hooks.messages.Response.noteInfo)
}
 ::red::hooks::messages::NoteInfo* Response::unsafe_arena_release_noteinfo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:red.hooks.messages.Response.noteInfo)
  if (has_noteinfo()) {
    clear_has_payload();
    ::red::hooks::messages::NoteInfo* temp = payload_.noteinfo_;
    payload_.noteinfo_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void Response::unsafe_arena_set_allocated_noteinfo(::red::hooks::messages::NoteInfo* noteinfo) {
  clear_payload();
  if (noteinfo) {
    set_has_noteinfo();
    payload_.noteinfo_ = noteinfo;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:red.hooks.messages.Response.noteInfo)
}

// optional .red.hooks.messages.Note note = 3;
bool Response::has_note() const {
  return payload_case() == kNote;
}
void Response::set_has_note() {
  _oneof_case_[0] = kNote;
}
void Response::clear_note() {
  if (has_note()) {
    if (GetArenaNoVirtual() == NULL) {
      delete payload_.note_;
    }
    clear_has_payload();
  }
}
 const ::red::hooks::messages::Note& Response::note() const {
  // @@protoc_insertion_point(field_get:red.hooks.messages.Response.note)
  return has_note()
      ? *payload_.note_
      : ::red::hooks::messages::Note::default_instance();
}
::red::hooks::messages::Note* Response::mutable_note() {
  if (!has_note()) {
    clear_payload();
    set_has_note();
    payload_.note_ = 
      ::google::protobuf::Arena::CreateMessage< ::red::hooks::messages::Note >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:red.hooks.messages.Response.note)
  return payload_.note_;
}
::red::hooks::messages::Note* Response::release_note() {
  // @@protoc_insertion_point(field_release:red.hooks.messages.Response.note)
  if (has_note()) {
    clear_has_payload();
    if (GetArenaNoVirtual() != NULL) {
      ::red::hooks::messages::Note* temp = new ::red::hooks::messages::Note(*payload_.note_);
      payload_.note_ = NULL;
      return temp;
    } else {
      ::red::hooks::messages::Note* temp = payload_.note_;
      payload_.note_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void Response::set_allocated_note(::red::hooks::messages::Note* note) {
  clear_payload();
  if (note) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(note) == NULL) {
      GetArenaNoVirtual()->Own(note);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(note)) {
      ::red::hooks::messages::Note* new_note = 
          ::google::protobuf::Arena::CreateMessage< ::red::hooks::messages::Note >(
          GetArenaNoVirtual());
      new_note->CopyFrom(*note);
      note = new_note;
    }
    set_has_note();
    payload_.note_ = note;
  }
  // @@protoc_insertion_point(field_set_allocated:red.hooks.messages.Response.note)
}
 ::red::hooks::messages::Note* Response::unsafe_arena_release_note() {
  // @@protoc_insertion_point(field_unsafe_arena_release:red.hooks.messages.Response.note)
  if (has_note()) {
    clear_has_payload();
    ::red::hooks::messages::Note* temp = payload_.note_;
    payload_.note_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void Response::unsafe_arena_set_allocated_note(::red::hooks::messages::Note* note) {
  clear_payload();
  if (note) {
    set_has_note();
    payload_.note_ = note;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:red.hooks.messages.Response.note)
}

// optional .red.hooks.messages.NoteCollection ncollection = 4;
bool Response::has_ncollection() const {
  return payload_case() == kNcollection;
}
void Response::set_has_ncollection() {
  _oneof_case_[0] = kNcollection;
}
void Response::clear_ncollection() {
  if (has_ncollection()) {
    if (GetArenaNoVirtual() == NULL) {
      delete payload_.ncollection_;
    }
    clear_has_payload();
  }
}
 const ::red::hooks::messages::NoteCollection& Response::ncollection() const {
  // @@protoc_insertion_point(field_get:red.hooks.messages.Response.ncollection)
  return has_ncollection()
      ? *payload_.ncollection_
      : ::red::hooks::messages::NoteCollection::default_instance();
}
::red::hooks::messages::NoteCollection* Response::mutable_ncollection() {
  if (!has_ncollection()) {
    clear_payload();
    set_has_ncollection();
    payload_.ncollection_ = 
      ::google::protobuf::Arena::CreateMessage< ::red::hooks::messages::NoteCollection >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:red.hooks.messages.Response.ncollection)
  return payload_.ncollection_;
}
::red::hooks::messages::NoteCollection* Response::release_ncollection() {
  // @@protoc_insertion_point(field_release:red.hooks.messages.Response.ncollection)
  if (has_ncollection()) {
    clear_has_payload();
    if (GetArenaNoVirtual() != NULL) {
      ::red::hooks::messages::NoteCollection* temp = new ::red::hooks::messages::NoteCollection(*payload_.ncollection_);
      payload_.ncollection_ = NULL;
      return temp;
    } else {
      ::red::hooks::messages::NoteCollection* temp = payload_.ncollection_;
      payload_.ncollection_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void Response::set_allocated_ncollection(::red::hooks::messages::NoteCollection* ncollection) {
  clear_payload();
  if (ncollection) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(ncollection) == NULL) {
      GetArenaNoVirtual()->Own(ncollection);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(ncollection)) {
      ::red::hooks::messages::NoteCollection* new_ncollection = 
          ::google::protobuf::Arena::CreateMessage< ::red::hooks::messages::NoteCollection >(
          GetArenaNoVirtual());
      new_ncollection->CopyFrom(*ncollection);
      ncollection = new_ncollection;
    }
    set_has_ncollection();
    payload_.ncollection_ = ncollection;
  }
  // @@protoc_insertion_point(field_set_allocated:red.hooks.messages.Response.ncollection)
}
 ::red::hooks::messages::NoteCollection* Response::unsafe_arena_release_ncollection() {
  // @@protoc_insertion_point(field_unsafe_arena_release:red.hooks.messages.Response.ncollection)
  if (has_ncollection()) {
    clear_has_payload();
    ::red::hooks::messages::NoteCollection* temp = payload_.ncollection_;
    payload_.ncollection_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void Response::unsafe_arena_set_allocated_ncollection(::red::hooks::messages::NoteCollection* ncollection) {
  clear_payload();
  if (ncollection) {
    set_has_ncollection();
    payload_.ncollection_ = ncollection;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:red.hooks.messages.Response.ncollection)
}

bool Response::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
void Response::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
Response::PayloadCase Response::payload_case() const {
  return Response::PayloadCase(_oneof_case_[0]);
}
inline const Response* Response::internal_default_instance() {
  return &Response_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request::kNoteInfoFieldNumber;
const int Request::kNoteFieldNumber;
const int Request::kNcollectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request::Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_base_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:red.hooks.messages.Request)
}
Request::Request(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_base_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:red.hooks.messages.Request)
}

void Request::InitAsDefaultInstance() {
  Request_default_oneof_instance_->noteinfo_ = const_cast< ::red::hooks::messages::RequestNoteInfo*>(
      ::red::hooks::messages::RequestNoteInfo::internal_default_instance());
  Request_default_oneof_instance_->note_ = const_cast< ::red::hooks::messages::RequestNote*>(
      ::red::hooks::messages::RequestNote::internal_default_instance());
  Request_default_oneof_instance_->ncollection_ = const_cast< ::red::hooks::messages::RequestNoteCollection*>(
      ::red::hooks::messages::RequestNoteCollection::internal_default_instance());
}

Request::Request(const Request& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:red.hooks.messages.Request)
}

void Request::SharedCtor() {
  clear_has_payload();
  _cached_size_ = 0;
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:red.hooks.messages.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (has_payload()) {
    clear_payload();
  }
}

void Request::ArenaDtor(void* object) {
  Request* _this = reinterpret_cast< Request* >(object);
  (void)_this;
}
void Request::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  protobuf_InitDefaults_base_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Request> Request_default_instance_;

Request* Request::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Request>(arena);
}

void Request::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:red.hooks.messages.Request)
  switch (payload_case()) {
    case kNoteInfo: {
      if (GetArenaNoVirtual() == NULL) {
        delete payload_.noteinfo_;
      }
      break;
    }
    case kNote: {
      if (GetArenaNoVirtual() == NULL) {
        delete payload_.note_;
      }
      break;
    }
    case kNcollection: {
      if (GetArenaNoVirtual() == NULL) {
        delete payload_.ncollection_;
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:red.hooks.messages.Request)
  clear_payload();
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:red.hooks.messages.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .red.hooks.messages.RequestNoteInfo noteInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_noteinfo()));
        } else {
          goto handle_unusual;
        }
        goto after_ncollection;
        break;
      }

      // optional .red.hooks.messages.RequestNote note = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_note()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ncollection;
        break;
      }

      // optional .red.hooks.messages.RequestNoteCollection ncollection = 3;
      case 3: {
        if (tag == 26) {
         parse_ncollection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ncollection()));
        } else {
          goto handle_unusual;
        }
       after_ncollection:
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:red.hooks.messages.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:red.hooks.messages.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:red.hooks.messages.Request)
  // optional .red.hooks.messages.RequestNoteInfo noteInfo = 1;
  if (has_noteinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *payload_.noteinfo_, output);
  }

  // optional .red.hooks.messages.RequestNote note = 2;
  if (has_note()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *payload_.note_, output);
  }

  // optional .red.hooks.messages.RequestNoteCollection ncollection = 3;
  if (has_ncollection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *payload_.ncollection_, output);
  }

  // @@protoc_insertion_point(serialize_end:red.hooks.messages.Request)
}

::google::protobuf::uint8* Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:red.hooks.messages.Request)
  // optional .red.hooks.messages.RequestNoteInfo noteInfo = 1;
  if (has_noteinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *payload_.noteinfo_, false, target);
  }

  // optional .red.hooks.messages.RequestNote note = 2;
  if (has_note()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *payload_.note_, false, target);
  }

  // optional .red.hooks.messages.RequestNoteCollection ncollection = 3;
  if (has_ncollection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *payload_.ncollection_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:red.hooks.messages.Request)
  return target;
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:red.hooks.messages.Request)
  size_t total_size = 0;

  switch (payload_case()) {
    // optional .red.hooks.messages.RequestNoteInfo noteInfo = 1;
    case kNoteInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.noteinfo_);
      break;
    }
    // optional .red.hooks.messages.RequestNote note = 2;
    case kNote: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.note_);
      break;
    }
    // optional .red.hooks.messages.RequestNoteCollection ncollection = 3;
    case kNcollection: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.ncollection_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:red.hooks.messages.Request)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:red.hooks.messages.Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:red.hooks.messages.Request)
    UnsafeMergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:red.hooks.messages.Request)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Request::UnsafeMergeFrom(const Request& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.payload_case()) {
    case kNoteInfo: {
      mutable_noteinfo()->::red::hooks::messages::RequestNoteInfo::MergeFrom(from.noteinfo());
      break;
    }
    case kNote: {
      mutable_note()->::red::hooks::messages::RequestNote::MergeFrom(from.note());
      break;
    }
    case kNcollection: {
      mutable_ncollection()->::red::hooks::messages::RequestNoteCollection::MergeFrom(from.ncollection());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:red.hooks.messages.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:red.hooks.messages.Request)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Request::IsInitialized() const {

  return true;
}

void Request::Swap(Request* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Request temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void Request::UnsafeArenaSwap(Request* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Request::InternalSwap(Request* other) {
  std::swap(payload_, other->payload_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Request

// optional .red.hooks.messages.RequestNoteInfo noteInfo = 1;
bool Request::has_noteinfo() const {
  return payload_case() == kNoteInfo;
}
void Request::set_has_noteinfo() {
  _oneof_case_[0] = kNoteInfo;
}
void Request::clear_noteinfo() {
  if (has_noteinfo()) {
    if (GetArenaNoVirtual() == NULL) {
      delete payload_.noteinfo_;
    }
    clear_has_payload();
  }
}
 const ::red::hooks::messages::RequestNoteInfo& Request::noteinfo() const {
  // @@protoc_insertion_point(field_get:red.hooks.messages.Request.noteInfo)
  return has_noteinfo()
      ? *payload_.noteinfo_
      : ::red::hooks::messages::RequestNoteInfo::default_instance();
}
::red::hooks::messages::RequestNoteInfo* Request::mutable_noteinfo() {
  if (!has_noteinfo()) {
    clear_payload();
    set_has_noteinfo();
    payload_.noteinfo_ = 
      ::google::protobuf::Arena::CreateMessage< ::red::hooks::messages::RequestNoteInfo >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:red.hooks.messages.Request.noteInfo)
  return payload_.noteinfo_;
}
::red::hooks::messages::RequestNoteInfo* Request::release_noteinfo() {
  // @@protoc_insertion_point(field_release:red.hooks.messages.Request.noteInfo)
  if (has_noteinfo()) {
    clear_has_payload();
    if (GetArenaNoVirtual() != NULL) {
      ::red::hooks::messages::RequestNoteInfo* temp = new ::red::hooks::messages::RequestNoteInfo(*payload_.noteinfo_);
      payload_.noteinfo_ = NULL;
      return temp;
    } else {
      ::red::hooks::messages::RequestNoteInfo* temp = payload_.noteinfo_;
      payload_.noteinfo_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void Request::set_allocated_noteinfo(::red::hooks::messages::RequestNoteInfo* noteinfo) {
  clear_payload();
  if (noteinfo) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(noteinfo) == NULL) {
      GetArenaNoVirtual()->Own(noteinfo);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(noteinfo)) {
      ::red::hooks::messages::RequestNoteInfo* new_noteinfo = 
          ::google::protobuf::Arena::CreateMessage< ::red::hooks::messages::RequestNoteInfo >(
          GetArenaNoVirtual());
      new_noteinfo->CopyFrom(*noteinfo);
      noteinfo = new_noteinfo;
    }
    set_has_noteinfo();
    payload_.noteinfo_ = noteinfo;
  }
  // @@protoc_insertion_point(field_set_allocated:red.hooks.messages.Request.noteInfo)
}
 ::red::hooks::messages::RequestNoteInfo* Request::unsafe_arena_release_noteinfo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:red.hooks.messages.Request.noteInfo)
  if (has_noteinfo()) {
    clear_has_payload();
    ::red::hooks::messages::RequestNoteInfo* temp = payload_.noteinfo_;
    payload_.noteinfo_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void Request::unsafe_arena_set_allocated_noteinfo(::red::hooks::messages::RequestNoteInfo* noteinfo) {
  clear_payload();
  if (noteinfo) {
    set_has_noteinfo();
    payload_.noteinfo_ = noteinfo;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:red.hooks.messages.Request.noteInfo)
}

// optional .red.hooks.messages.RequestNote note = 2;
bool Request::has_note() const {
  return payload_case() == kNote;
}
void Request::set_has_note() {
  _oneof_case_[0] = kNote;
}
void Request::clear_note() {
  if (has_note()) {
    if (GetArenaNoVirtual() == NULL) {
      delete payload_.note_;
    }
    clear_has_payload();
  }
}
 const ::red::hooks::messages::RequestNote& Request::note() const {
  // @@protoc_insertion_point(field_get:red.hooks.messages.Request.note)
  return has_note()
      ? *payload_.note_
      : ::red::hooks::messages::RequestNote::default_instance();
}
::red::hooks::messages::RequestNote* Request::mutable_note() {
  if (!has_note()) {
    clear_payload();
    set_has_note();
    payload_.note_ = 
      ::google::protobuf::Arena::CreateMessage< ::red::hooks::messages::RequestNote >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:red.hooks.messages.Request.note)
  return payload_.note_;
}
::red::hooks::messages::RequestNote* Request::release_note() {
  // @@protoc_insertion_point(field_release:red.hooks.messages.Request.note)
  if (has_note()) {
    clear_has_payload();
    if (GetArenaNoVirtual() != NULL) {
      ::red::hooks::messages::RequestNote* temp = new ::red::hooks::messages::RequestNote(*payload_.note_);
      payload_.note_ = NULL;
      return temp;
    } else {
      ::red::hooks::messages::RequestNote* temp = payload_.note_;
      payload_.note_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void Request::set_allocated_note(::red::hooks::messages::RequestNote* note) {
  clear_payload();
  if (note) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(note) == NULL) {
      GetArenaNoVirtual()->Own(note);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(note)) {
      ::red::hooks::messages::RequestNote* new_note = 
          ::google::protobuf::Arena::CreateMessage< ::red::hooks::messages::RequestNote >(
          GetArenaNoVirtual());
      new_note->CopyFrom(*note);
      note = new_note;
    }
    set_has_note();
    payload_.note_ = note;
  }
  // @@protoc_insertion_point(field_set_allocated:red.hooks.messages.Request.note)
}
 ::red::hooks::messages::RequestNote* Request::unsafe_arena_release_note() {
  // @@protoc_insertion_point(field_unsafe_arena_release:red.hooks.messages.Request.note)
  if (has_note()) {
    clear_has_payload();
    ::red::hooks::messages::RequestNote* temp = payload_.note_;
    payload_.note_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void Request::unsafe_arena_set_allocated_note(::red::hooks::messages::RequestNote* note) {
  clear_payload();
  if (note) {
    set_has_note();
    payload_.note_ = note;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:red.hooks.messages.Request.note)
}

// optional .red.hooks.messages.RequestNoteCollection ncollection = 3;
bool Request::has_ncollection() const {
  return payload_case() == kNcollection;
}
void Request::set_has_ncollection() {
  _oneof_case_[0] = kNcollection;
}
void Request::clear_ncollection() {
  if (has_ncollection()) {
    if (GetArenaNoVirtual() == NULL) {
      delete payload_.ncollection_;
    }
    clear_has_payload();
  }
}
 const ::red::hooks::messages::RequestNoteCollection& Request::ncollection() const {
  // @@protoc_insertion_point(field_get:red.hooks.messages.Request.ncollection)
  return has_ncollection()
      ? *payload_.ncollection_
      : ::red::hooks::messages::RequestNoteCollection::default_instance();
}
::red::hooks::messages::RequestNoteCollection* Request::mutable_ncollection() {
  if (!has_ncollection()) {
    clear_payload();
    set_has_ncollection();
    payload_.ncollection_ = 
      ::google::protobuf::Arena::CreateMessage< ::red::hooks::messages::RequestNoteCollection >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:red.hooks.messages.Request.ncollection)
  return payload_.ncollection_;
}
::red::hooks::messages::RequestNoteCollection* Request::release_ncollection() {
  // @@protoc_insertion_point(field_release:red.hooks.messages.Request.ncollection)
  if (has_ncollection()) {
    clear_has_payload();
    if (GetArenaNoVirtual() != NULL) {
      ::red::hooks::messages::RequestNoteCollection* temp = new ::red::hooks::messages::RequestNoteCollection(*payload_.ncollection_);
      payload_.ncollection_ = NULL;
      return temp;
    } else {
      ::red::hooks::messages::RequestNoteCollection* temp = payload_.ncollection_;
      payload_.ncollection_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void Request::set_allocated_ncollection(::red::hooks::messages::RequestNoteCollection* ncollection) {
  clear_payload();
  if (ncollection) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(ncollection) == NULL) {
      GetArenaNoVirtual()->Own(ncollection);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(ncollection)) {
      ::red::hooks::messages::RequestNoteCollection* new_ncollection = 
          ::google::protobuf::Arena::CreateMessage< ::red::hooks::messages::RequestNoteCollection >(
          GetArenaNoVirtual());
      new_ncollection->CopyFrom(*ncollection);
      ncollection = new_ncollection;
    }
    set_has_ncollection();
    payload_.ncollection_ = ncollection;
  }
  // @@protoc_insertion_point(field_set_allocated:red.hooks.messages.Request.ncollection)
}
 ::red::hooks::messages::RequestNoteCollection* Request::unsafe_arena_release_ncollection() {
  // @@protoc_insertion_point(field_unsafe_arena_release:red.hooks.messages.Request.ncollection)
  if (has_ncollection()) {
    clear_has_payload();
    ::red::hooks::messages::RequestNoteCollection* temp = payload_.ncollection_;
    payload_.ncollection_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void Request::unsafe_arena_set_allocated_ncollection(::red::hooks::messages::RequestNoteCollection* ncollection) {
  clear_payload();
  if (ncollection) {
    set_has_ncollection();
    payload_.ncollection_ = ncollection;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:red.hooks.messages.Request.ncollection)
}

bool Request::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
void Request::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
Request::PayloadCase Request::payload_case() const {
  return Request::PayloadCase(_oneof_case_[0]);
}
inline const Request* Request::internal_default_instance() {
  return &Request_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace hooks
}  // namespace red

// @@protoc_insertion_point(global_scope)
