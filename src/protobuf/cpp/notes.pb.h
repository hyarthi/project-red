// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: notes.proto

#ifndef PROTOBUF_notes_2eproto__INCLUDED
#define PROTOBUF_notes_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace red {
namespace hooks {
namespace messages {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_notes_2eproto();
void protobuf_InitDefaults_notes_2eproto();
void protobuf_AssignDesc_notes_2eproto();
void protobuf_ShutdownFile_notes_2eproto();

class Item;
class Note;
class NoteCollection;
class NoteInfo;
class RequestNote;
class RequestNoteCollection;
class RequestNoteInfo;

enum Action {
  READ = 0,
  UPDATE = 1,
  REMOVE = 2,
  Action_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Action_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Action_IsValid(int value);
const Action Action_MIN = READ;
const Action Action_MAX = REMOVE;
const int Action_ARRAYSIZE = Action_MAX + 1;

const ::google::protobuf::EnumDescriptor* Action_descriptor();
inline const ::std::string& Action_Name(Action value) {
  return ::google::protobuf::internal::NameOfEnum(
    Action_descriptor(), value);
}
inline bool Action_Parse(
    const ::std::string& name, Action* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Action>(
    Action_descriptor(), name, value);
}
// ===================================================================

class NoteInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:red.hooks.messages.NoteInfo) */ {
 public:
  NoteInfo();
  virtual ~NoteInfo();

  NoteInfo(const NoteInfo& from);

  inline NoteInfo& operator=(const NoteInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const NoteInfo& default_instance();

  static const NoteInfo* internal_default_instance();

  void UnsafeArenaSwap(NoteInfo* other);
  void Swap(NoteInfo* other);

  // implements Message ----------------------------------------------

  inline NoteInfo* New() const { return New(NULL); }

  NoteInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NoteInfo& from);
  void MergeFrom(const NoteInfo& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NoteInfo* other);
  void UnsafeMergeFrom(const NoteInfo& from);
  protected:
  explicit NoteInfo(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string unid = 1;
  void clear_unid();
  static const int kUnidFieldNumber = 1;
  const ::std::string& unid() const;
  void set_unid(const ::std::string& value);
  void set_unid(const char* value);
  void set_unid(const char* value, size_t size);
  ::std::string* mutable_unid();
  ::std::string* release_unid();
  void set_allocated_unid(::std::string* unid);
  ::std::string* unsafe_arena_release_unid();
  void unsafe_arena_set_allocated_unid(
      ::std::string* unid);

  // optional uint64 noteId = 2;
  void clear_noteid();
  static const int kNoteIdFieldNumber = 2;
  ::google::protobuf::uint64 noteid() const;
  void set_noteid(::google::protobuf::uint64 value);

  // optional string dbId = 3;
  void clear_dbid();
  static const int kDbIdFieldNumber = 3;
  const ::std::string& dbid() const;
  void set_dbid(const ::std::string& value);
  void set_dbid(const char* value);
  void set_dbid(const char* value, size_t size);
  ::std::string* mutable_dbid();
  ::std::string* release_dbid();
  void set_allocated_dbid(::std::string* dbid);
  ::std::string* unsafe_arena_release_dbid();
  void unsafe_arena_set_allocated_dbid(
      ::std::string* dbid);

  // optional string modified = 4;
  void clear_modified();
  static const int kModifiedFieldNumber = 4;
  const ::std::string& modified() const;
  void set_modified(const ::std::string& value);
  void set_modified(const char* value);
  void set_modified(const char* value, size_t size);
  ::std::string* mutable_modified();
  ::std::string* release_modified();
  void set_allocated_modified(::std::string* modified);
  ::std::string* unsafe_arena_release_modified();
  void unsafe_arena_set_allocated_modified(
      ::std::string* modified);

  // optional uint32 classId = 5;
  void clear_classid();
  static const int kClassIdFieldNumber = 5;
  ::google::protobuf::uint32 classid() const;
  void set_classid(::google::protobuf::uint32 value);

  // optional uint32 flags = 6;
  void clear_flags();
  static const int kFlagsFieldNumber = 6;
  ::google::protobuf::uint32 flags() const;
  void set_flags(::google::protobuf::uint32 value);

  // optional string accessed = 7;
  void clear_accessed();
  static const int kAccessedFieldNumber = 7;
  const ::std::string& accessed() const;
  void set_accessed(const ::std::string& value);
  void set_accessed(const char* value);
  void set_accessed(const char* value, size_t size);
  ::std::string* mutable_accessed();
  ::std::string* release_accessed();
  void set_allocated_accessed(::std::string* accessed);
  ::std::string* unsafe_arena_release_accessed();
  void unsafe_arena_set_allocated_accessed(
      ::std::string* accessed);

  // optional uint64 parentNoteId = 8;
  void clear_parentnoteid();
  static const int kParentNoteIdFieldNumber = 8;
  ::google::protobuf::uint64 parentnoteid() const;
  void set_parentnoteid(::google::protobuf::uint64 value);

  // optional uint64 responseCount = 9;
  void clear_responsecount();
  static const int kResponseCountFieldNumber = 9;
  ::google::protobuf::uint64 responsecount() const;
  void set_responsecount(::google::protobuf::uint64 value);

  // optional string addedToFile = 10;
  void clear_addedtofile();
  static const int kAddedToFileFieldNumber = 10;
  const ::std::string& addedtofile() const;
  void set_addedtofile(const ::std::string& value);
  void set_addedtofile(const char* value);
  void set_addedtofile(const char* value, size_t size);
  ::std::string* mutable_addedtofile();
  ::std::string* release_addedtofile();
  void set_allocated_addedtofile(::std::string* addedtofile);
  ::std::string* unsafe_arena_release_addedtofile();
  void unsafe_arena_set_allocated_addedtofile(
      ::std::string* addedtofile);

  // @@protoc_insertion_point(class_scope:red.hooks.messages.NoteInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr unid_;
  ::google::protobuf::internal::ArenaStringPtr dbid_;
  ::google::protobuf::internal::ArenaStringPtr modified_;
  ::google::protobuf::internal::ArenaStringPtr accessed_;
  ::google::protobuf::internal::ArenaStringPtr addedtofile_;
  ::google::protobuf::uint64 noteid_;
  ::google::protobuf::uint32 classid_;
  ::google::protobuf::uint32 flags_;
  ::google::protobuf::uint64 parentnoteid_;
  ::google::protobuf::uint64 responsecount_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_notes_2eproto_impl();
  friend void  protobuf_AddDesc_notes_2eproto_impl();
  friend void protobuf_AssignDesc_notes_2eproto();
  friend void protobuf_ShutdownFile_notes_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<NoteInfo> NoteInfo_default_instance_;

// -------------------------------------------------------------------

class Note : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:red.hooks.messages.Note) */ {
 public:
  Note();
  virtual ~Note();

  Note(const Note& from);

  inline Note& operator=(const Note& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Note& default_instance();

  static const Note* internal_default_instance();

  void UnsafeArenaSwap(Note* other);
  void Swap(Note* other);

  // implements Message ----------------------------------------------

  inline Note* New() const { return New(NULL); }

  Note* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Note& from);
  void MergeFrom(const Note& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Note* other);
  void UnsafeMergeFrom(const Note& from);
  protected:
  explicit Note(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string unid = 1;
  void clear_unid();
  static const int kUnidFieldNumber = 1;
  const ::std::string& unid() const;
  void set_unid(const ::std::string& value);
  void set_unid(const char* value);
  void set_unid(const char* value, size_t size);
  ::std::string* mutable_unid();
  ::std::string* release_unid();
  void set_allocated_unid(::std::string* unid);
  ::std::string* unsafe_arena_release_unid();
  void unsafe_arena_set_allocated_unid(
      ::std::string* unid);

  // optional uint64 noteId = 2;
  void clear_noteid();
  static const int kNoteIdFieldNumber = 2;
  ::google::protobuf::uint64 noteid() const;
  void set_noteid(::google::protobuf::uint64 value);

  // optional string dbId = 3;
  void clear_dbid();
  static const int kDbIdFieldNumber = 3;
  const ::std::string& dbid() const;
  void set_dbid(const ::std::string& value);
  void set_dbid(const char* value);
  void set_dbid(const char* value, size_t size);
  ::std::string* mutable_dbid();
  ::std::string* release_dbid();
  void set_allocated_dbid(::std::string* dbid);
  ::std::string* unsafe_arena_release_dbid();
  void unsafe_arena_set_allocated_dbid(
      ::std::string* dbid);

  // optional uint32 seqNum = 4;
  void clear_seqnum();
  static const int kSeqNumFieldNumber = 4;
  ::google::protobuf::uint32 seqnum() const;
  void set_seqnum(::google::protobuf::uint32 value);

  // repeated .red.hooks.messages.Item items = 10;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 10;
  const ::red::hooks::messages::Item& items(int index) const;
  ::red::hooks::messages::Item* mutable_items(int index);
  ::red::hooks::messages::Item* add_items();
  ::google::protobuf::RepeatedPtrField< ::red::hooks::messages::Item >*
      mutable_items();
  const ::google::protobuf::RepeatedPtrField< ::red::hooks::messages::Item >&
      items() const;

  // @@protoc_insertion_point(class_scope:red.hooks.messages.Note)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::red::hooks::messages::Item > items_;
  ::google::protobuf::internal::ArenaStringPtr unid_;
  ::google::protobuf::internal::ArenaStringPtr dbid_;
  ::google::protobuf::uint64 noteid_;
  ::google::protobuf::uint32 seqnum_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_notes_2eproto_impl();
  friend void  protobuf_AddDesc_notes_2eproto_impl();
  friend void protobuf_AssignDesc_notes_2eproto();
  friend void protobuf_ShutdownFile_notes_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Note> Note_default_instance_;

// -------------------------------------------------------------------

class Item : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:red.hooks.messages.Item) */ {
 public:
  Item();
  virtual ~Item();

  Item(const Item& from);

  inline Item& operator=(const Item& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Item& default_instance();

  static const Item* internal_default_instance();

  void UnsafeArenaSwap(Item* other);
  void Swap(Item* other);

  // implements Message ----------------------------------------------

  inline Item* New() const { return New(NULL); }

  Item* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Item& from);
  void MergeFrom(const Item& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Item* other);
  void UnsafeMergeFrom(const Item& from);
  protected:
  explicit Item(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // optional string name = 4;
  void clear_name();
  static const int kNameFieldNumber = 4;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  ::std::string* unsafe_arena_release_name();
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // optional uint32 flags = 5;
  void clear_flags();
  static const int kFlagsFieldNumber = 5;
  ::google::protobuf::uint32 flags() const;
  void set_flags(::google::protobuf::uint32 value);

  // repeated string tvalue = 2;
  int tvalue_size() const;
  void clear_tvalue();
  static const int kTvalueFieldNumber = 2;
  const ::std::string& tvalue(int index) const;
  ::std::string* mutable_tvalue(int index);
  void set_tvalue(int index, const ::std::string& value);
  void set_tvalue(int index, const char* value);
  void set_tvalue(int index, const char* value, size_t size);
  ::std::string* add_tvalue();
  void add_tvalue(const ::std::string& value);
  void add_tvalue(const char* value);
  void add_tvalue(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& tvalue() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tvalue();

  // repeated uint64 nvalue = 3;
  int nvalue_size() const;
  void clear_nvalue();
  static const int kNvalueFieldNumber = 3;
  ::google::protobuf::uint64 nvalue(int index) const;
  void set_nvalue(int index, ::google::protobuf::uint64 value);
  void add_nvalue(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      nvalue() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_nvalue();

  // @@protoc_insertion_point(class_scope:red.hooks.messages.Item)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::std::string> tvalue_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > nvalue_;
  mutable int _nvalue_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 flags_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_notes_2eproto_impl();
  friend void  protobuf_AddDesc_notes_2eproto_impl();
  friend void protobuf_AssignDesc_notes_2eproto();
  friend void protobuf_ShutdownFile_notes_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Item> Item_default_instance_;

// -------------------------------------------------------------------

class NoteCollection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:red.hooks.messages.NoteCollection) */ {
 public:
  NoteCollection();
  virtual ~NoteCollection();

  NoteCollection(const NoteCollection& from);

  inline NoteCollection& operator=(const NoteCollection& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const NoteCollection& default_instance();

  static const NoteCollection* internal_default_instance();

  void UnsafeArenaSwap(NoteCollection* other);
  void Swap(NoteCollection* other);

  // implements Message ----------------------------------------------

  inline NoteCollection* New() const { return New(NULL); }

  NoteCollection* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NoteCollection& from);
  void MergeFrom(const NoteCollection& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NoteCollection* other);
  void UnsafeMergeFrom(const NoteCollection& from);
  protected:
  explicit NoteCollection(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:red.hooks.messages.NoteCollection)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_notes_2eproto_impl();
  friend void  protobuf_AddDesc_notes_2eproto_impl();
  friend void protobuf_AssignDesc_notes_2eproto();
  friend void protobuf_ShutdownFile_notes_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<NoteCollection> NoteCollection_default_instance_;

// -------------------------------------------------------------------

class RequestNoteInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:red.hooks.messages.RequestNoteInfo) */ {
 public:
  RequestNoteInfo();
  virtual ~RequestNoteInfo();

  RequestNoteInfo(const RequestNoteInfo& from);

  inline RequestNoteInfo& operator=(const RequestNoteInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestNoteInfo& default_instance();

  static const RequestNoteInfo* internal_default_instance();

  void UnsafeArenaSwap(RequestNoteInfo* other);
  void Swap(RequestNoteInfo* other);

  // implements Message ----------------------------------------------

  inline RequestNoteInfo* New() const { return New(NULL); }

  RequestNoteInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestNoteInfo& from);
  void MergeFrom(const RequestNoteInfo& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RequestNoteInfo* other);
  void UnsafeMergeFrom(const RequestNoteInfo& from);
  protected:
  explicit RequestNoteInfo(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string unid = 1;
  void clear_unid();
  static const int kUnidFieldNumber = 1;
  const ::std::string& unid() const;
  void set_unid(const ::std::string& value);
  void set_unid(const char* value);
  void set_unid(const char* value, size_t size);
  ::std::string* mutable_unid();
  ::std::string* release_unid();
  void set_allocated_unid(::std::string* unid);
  ::std::string* unsafe_arena_release_unid();
  void unsafe_arena_set_allocated_unid(
      ::std::string* unid);

  // optional uint64 noteId = 2;
  void clear_noteid();
  static const int kNoteIdFieldNumber = 2;
  ::google::protobuf::uint64 noteid() const;
  void set_noteid(::google::protobuf::uint64 value);

  // optional string dbId = 3;
  void clear_dbid();
  static const int kDbIdFieldNumber = 3;
  const ::std::string& dbid() const;
  void set_dbid(const ::std::string& value);
  void set_dbid(const char* value);
  void set_dbid(const char* value, size_t size);
  ::std::string* mutable_dbid();
  ::std::string* release_dbid();
  void set_allocated_dbid(::std::string* dbid);
  ::std::string* unsafe_arena_release_dbid();
  void unsafe_arena_set_allocated_dbid(
      ::std::string* dbid);

  // optional .red.hooks.messages.Action action = 4;
  void clear_action();
  static const int kActionFieldNumber = 4;
  ::red::hooks::messages::Action action() const;
  void set_action(::red::hooks::messages::Action value);

  // @@protoc_insertion_point(class_scope:red.hooks.messages.RequestNoteInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr unid_;
  ::google::protobuf::internal::ArenaStringPtr dbid_;
  ::google::protobuf::uint64 noteid_;
  int action_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_notes_2eproto_impl();
  friend void  protobuf_AddDesc_notes_2eproto_impl();
  friend void protobuf_AssignDesc_notes_2eproto();
  friend void protobuf_ShutdownFile_notes_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<RequestNoteInfo> RequestNoteInfo_default_instance_;

// -------------------------------------------------------------------

class RequestNote : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:red.hooks.messages.RequestNote) */ {
 public:
  RequestNote();
  virtual ~RequestNote();

  RequestNote(const RequestNote& from);

  inline RequestNote& operator=(const RequestNote& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestNote& default_instance();

  static const RequestNote* internal_default_instance();

  void UnsafeArenaSwap(RequestNote* other);
  void Swap(RequestNote* other);

  // implements Message ----------------------------------------------

  inline RequestNote* New() const { return New(NULL); }

  RequestNote* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestNote& from);
  void MergeFrom(const RequestNote& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RequestNote* other);
  void UnsafeMergeFrom(const RequestNote& from);
  protected:
  explicit RequestNote(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string unid = 1;
  void clear_unid();
  static const int kUnidFieldNumber = 1;
  const ::std::string& unid() const;
  void set_unid(const ::std::string& value);
  void set_unid(const char* value);
  void set_unid(const char* value, size_t size);
  ::std::string* mutable_unid();
  ::std::string* release_unid();
  void set_allocated_unid(::std::string* unid);
  ::std::string* unsafe_arena_release_unid();
  void unsafe_arena_set_allocated_unid(
      ::std::string* unid);

  // optional uint64 noteId = 2;
  void clear_noteid();
  static const int kNoteIdFieldNumber = 2;
  ::google::protobuf::uint64 noteid() const;
  void set_noteid(::google::protobuf::uint64 value);

  // optional string dbId = 3;
  void clear_dbid();
  static const int kDbIdFieldNumber = 3;
  const ::std::string& dbid() const;
  void set_dbid(const ::std::string& value);
  void set_dbid(const char* value);
  void set_dbid(const char* value, size_t size);
  ::std::string* mutable_dbid();
  ::std::string* release_dbid();
  void set_allocated_dbid(::std::string* dbid);
  ::std::string* unsafe_arena_release_dbid();
  void unsafe_arena_set_allocated_dbid(
      ::std::string* dbid);

  // optional .red.hooks.messages.Action action = 4;
  void clear_action();
  static const int kActionFieldNumber = 4;
  ::red::hooks::messages::Action action() const;
  void set_action(::red::hooks::messages::Action value);

  // optional uint32 seqNum = 5;
  void clear_seqnum();
  static const int kSeqNumFieldNumber = 5;
  ::google::protobuf::uint32 seqnum() const;
  void set_seqnum(::google::protobuf::uint32 value);

  // optional uint32 flags = 6;
  void clear_flags();
  static const int kFlagsFieldNumber = 6;
  ::google::protobuf::uint32 flags() const;
  void set_flags(::google::protobuf::uint32 value);

  // repeated .red.hooks.messages.Item items = 10;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 10;
  const ::red::hooks::messages::Item& items(int index) const;
  ::red::hooks::messages::Item* mutable_items(int index);
  ::red::hooks::messages::Item* add_items();
  ::google::protobuf::RepeatedPtrField< ::red::hooks::messages::Item >*
      mutable_items();
  const ::google::protobuf::RepeatedPtrField< ::red::hooks::messages::Item >&
      items() const;

  // @@protoc_insertion_point(class_scope:red.hooks.messages.RequestNote)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::red::hooks::messages::Item > items_;
  ::google::protobuf::internal::ArenaStringPtr unid_;
  ::google::protobuf::internal::ArenaStringPtr dbid_;
  ::google::protobuf::uint64 noteid_;
  int action_;
  ::google::protobuf::uint32 seqnum_;
  ::google::protobuf::uint32 flags_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_notes_2eproto_impl();
  friend void  protobuf_AddDesc_notes_2eproto_impl();
  friend void protobuf_AssignDesc_notes_2eproto();
  friend void protobuf_ShutdownFile_notes_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<RequestNote> RequestNote_default_instance_;

// -------------------------------------------------------------------

class RequestNoteCollection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:red.hooks.messages.RequestNoteCollection) */ {
 public:
  RequestNoteCollection();
  virtual ~RequestNoteCollection();

  RequestNoteCollection(const RequestNoteCollection& from);

  inline RequestNoteCollection& operator=(const RequestNoteCollection& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestNoteCollection& default_instance();

  static const RequestNoteCollection* internal_default_instance();

  void UnsafeArenaSwap(RequestNoteCollection* other);
  void Swap(RequestNoteCollection* other);

  // implements Message ----------------------------------------------

  inline RequestNoteCollection* New() const { return New(NULL); }

  RequestNoteCollection* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestNoteCollection& from);
  void MergeFrom(const RequestNoteCollection& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RequestNoteCollection* other);
  void UnsafeMergeFrom(const RequestNoteCollection& from);
  protected:
  explicit RequestNoteCollection(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:red.hooks.messages.RequestNoteCollection)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_notes_2eproto_impl();
  friend void  protobuf_AddDesc_notes_2eproto_impl();
  friend void protobuf_AssignDesc_notes_2eproto();
  friend void protobuf_ShutdownFile_notes_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<RequestNoteCollection> RequestNoteCollection_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// NoteInfo

// optional string unid = 1;
inline void NoteInfo::clear_unid() {
  unid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& NoteInfo::unid() const {
  // @@protoc_insertion_point(field_get:red.hooks.messages.NoteInfo.unid)
  return unid_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NoteInfo::set_unid(const ::std::string& value) {
  
  unid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:red.hooks.messages.NoteInfo.unid)
}
inline void NoteInfo::set_unid(const char* value) {
  
  unid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:red.hooks.messages.NoteInfo.unid)
}
inline void NoteInfo::set_unid(const char* value,
    size_t size) {
  
  unid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:red.hooks.messages.NoteInfo.unid)
}
inline ::std::string* NoteInfo::mutable_unid() {
  
  // @@protoc_insertion_point(field_mutable:red.hooks.messages.NoteInfo.unid)
  return unid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NoteInfo::release_unid() {
  // @@protoc_insertion_point(field_release:red.hooks.messages.NoteInfo.unid)
  
  return unid_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NoteInfo::unsafe_arena_release_unid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:red.hooks.messages.NoteInfo.unid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return unid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void NoteInfo::set_allocated_unid(::std::string* unid) {
  if (unid != NULL) {
    
  } else {
    
  }
  unid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:red.hooks.messages.NoteInfo.unid)
}
inline void NoteInfo::unsafe_arena_set_allocated_unid(
    ::std::string* unid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (unid != NULL) {
    
  } else {
    
  }
  unid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      unid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:red.hooks.messages.NoteInfo.unid)
}

// optional uint64 noteId = 2;
inline void NoteInfo::clear_noteid() {
  noteid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NoteInfo::noteid() const {
  // @@protoc_insertion_point(field_get:red.hooks.messages.NoteInfo.noteId)
  return noteid_;
}
inline void NoteInfo::set_noteid(::google::protobuf::uint64 value) {
  
  noteid_ = value;
  // @@protoc_insertion_point(field_set:red.hooks.messages.NoteInfo.noteId)
}

// optional string dbId = 3;
inline void NoteInfo::clear_dbid() {
  dbid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& NoteInfo::dbid() const {
  // @@protoc_insertion_point(field_get:red.hooks.messages.NoteInfo.dbId)
  return dbid_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NoteInfo::set_dbid(const ::std::string& value) {
  
  dbid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:red.hooks.messages.NoteInfo.dbId)
}
inline void NoteInfo::set_dbid(const char* value) {
  
  dbid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:red.hooks.messages.NoteInfo.dbId)
}
inline void NoteInfo::set_dbid(const char* value,
    size_t size) {
  
  dbid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:red.hooks.messages.NoteInfo.dbId)
}
inline ::std::string* NoteInfo::mutable_dbid() {
  
  // @@protoc_insertion_point(field_mutable:red.hooks.messages.NoteInfo.dbId)
  return dbid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NoteInfo::release_dbid() {
  // @@protoc_insertion_point(field_release:red.hooks.messages.NoteInfo.dbId)
  
  return dbid_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NoteInfo::unsafe_arena_release_dbid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:red.hooks.messages.NoteInfo.dbId)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return dbid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void NoteInfo::set_allocated_dbid(::std::string* dbid) {
  if (dbid != NULL) {
    
  } else {
    
  }
  dbid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dbid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:red.hooks.messages.NoteInfo.dbId)
}
inline void NoteInfo::unsafe_arena_set_allocated_dbid(
    ::std::string* dbid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (dbid != NULL) {
    
  } else {
    
  }
  dbid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      dbid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:red.hooks.messages.NoteInfo.dbId)
}

// optional string modified = 4;
inline void NoteInfo::clear_modified() {
  modified_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& NoteInfo::modified() const {
  // @@protoc_insertion_point(field_get:red.hooks.messages.NoteInfo.modified)
  return modified_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NoteInfo::set_modified(const ::std::string& value) {
  
  modified_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:red.hooks.messages.NoteInfo.modified)
}
inline void NoteInfo::set_modified(const char* value) {
  
  modified_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:red.hooks.messages.NoteInfo.modified)
}
inline void NoteInfo::set_modified(const char* value,
    size_t size) {
  
  modified_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:red.hooks.messages.NoteInfo.modified)
}
inline ::std::string* NoteInfo::mutable_modified() {
  
  // @@protoc_insertion_point(field_mutable:red.hooks.messages.NoteInfo.modified)
  return modified_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NoteInfo::release_modified() {
  // @@protoc_insertion_point(field_release:red.hooks.messages.NoteInfo.modified)
  
  return modified_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NoteInfo::unsafe_arena_release_modified() {
  // @@protoc_insertion_point(field_unsafe_arena_release:red.hooks.messages.NoteInfo.modified)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return modified_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void NoteInfo::set_allocated_modified(::std::string* modified) {
  if (modified != NULL) {
    
  } else {
    
  }
  modified_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), modified,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:red.hooks.messages.NoteInfo.modified)
}
inline void NoteInfo::unsafe_arena_set_allocated_modified(
    ::std::string* modified) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (modified != NULL) {
    
  } else {
    
  }
  modified_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      modified, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:red.hooks.messages.NoteInfo.modified)
}

// optional uint32 classId = 5;
inline void NoteInfo::clear_classid() {
  classid_ = 0u;
}
inline ::google::protobuf::uint32 NoteInfo::classid() const {
  // @@protoc_insertion_point(field_get:red.hooks.messages.NoteInfo.classId)
  return classid_;
}
inline void NoteInfo::set_classid(::google::protobuf::uint32 value) {
  
  classid_ = value;
  // @@protoc_insertion_point(field_set:red.hooks.messages.NoteInfo.classId)
}

// optional uint32 flags = 6;
inline void NoteInfo::clear_flags() {
  flags_ = 0u;
}
inline ::google::protobuf::uint32 NoteInfo::flags() const {
  // @@protoc_insertion_point(field_get:red.hooks.messages.NoteInfo.flags)
  return flags_;
}
inline void NoteInfo::set_flags(::google::protobuf::uint32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:red.hooks.messages.NoteInfo.flags)
}

// optional string accessed = 7;
inline void NoteInfo::clear_accessed() {
  accessed_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& NoteInfo::accessed() const {
  // @@protoc_insertion_point(field_get:red.hooks.messages.NoteInfo.accessed)
  return accessed_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NoteInfo::set_accessed(const ::std::string& value) {
  
  accessed_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:red.hooks.messages.NoteInfo.accessed)
}
inline void NoteInfo::set_accessed(const char* value) {
  
  accessed_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:red.hooks.messages.NoteInfo.accessed)
}
inline void NoteInfo::set_accessed(const char* value,
    size_t size) {
  
  accessed_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:red.hooks.messages.NoteInfo.accessed)
}
inline ::std::string* NoteInfo::mutable_accessed() {
  
  // @@protoc_insertion_point(field_mutable:red.hooks.messages.NoteInfo.accessed)
  return accessed_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NoteInfo::release_accessed() {
  // @@protoc_insertion_point(field_release:red.hooks.messages.NoteInfo.accessed)
  
  return accessed_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NoteInfo::unsafe_arena_release_accessed() {
  // @@protoc_insertion_point(field_unsafe_arena_release:red.hooks.messages.NoteInfo.accessed)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return accessed_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void NoteInfo::set_allocated_accessed(::std::string* accessed) {
  if (accessed != NULL) {
    
  } else {
    
  }
  accessed_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), accessed,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:red.hooks.messages.NoteInfo.accessed)
}
inline void NoteInfo::unsafe_arena_set_allocated_accessed(
    ::std::string* accessed) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (accessed != NULL) {
    
  } else {
    
  }
  accessed_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      accessed, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:red.hooks.messages.NoteInfo.accessed)
}

// optional uint64 parentNoteId = 8;
inline void NoteInfo::clear_parentnoteid() {
  parentnoteid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NoteInfo::parentnoteid() const {
  // @@protoc_insertion_point(field_get:red.hooks.messages.NoteInfo.parentNoteId)
  return parentnoteid_;
}
inline void NoteInfo::set_parentnoteid(::google::protobuf::uint64 value) {
  
  parentnoteid_ = value;
  // @@protoc_insertion_point(field_set:red.hooks.messages.NoteInfo.parentNoteId)
}

// optional uint64 responseCount = 9;
inline void NoteInfo::clear_responsecount() {
  responsecount_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NoteInfo::responsecount() const {
  // @@protoc_insertion_point(field_get:red.hooks.messages.NoteInfo.responseCount)
  return responsecount_;
}
inline void NoteInfo::set_responsecount(::google::protobuf::uint64 value) {
  
  responsecount_ = value;
  // @@protoc_insertion_point(field_set:red.hooks.messages.NoteInfo.responseCount)
}

// optional string addedToFile = 10;
inline void NoteInfo::clear_addedtofile() {
  addedtofile_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& NoteInfo::addedtofile() const {
  // @@protoc_insertion_point(field_get:red.hooks.messages.NoteInfo.addedToFile)
  return addedtofile_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NoteInfo::set_addedtofile(const ::std::string& value) {
  
  addedtofile_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:red.hooks.messages.NoteInfo.addedToFile)
}
inline void NoteInfo::set_addedtofile(const char* value) {
  
  addedtofile_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:red.hooks.messages.NoteInfo.addedToFile)
}
inline void NoteInfo::set_addedtofile(const char* value,
    size_t size) {
  
  addedtofile_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:red.hooks.messages.NoteInfo.addedToFile)
}
inline ::std::string* NoteInfo::mutable_addedtofile() {
  
  // @@protoc_insertion_point(field_mutable:red.hooks.messages.NoteInfo.addedToFile)
  return addedtofile_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NoteInfo::release_addedtofile() {
  // @@protoc_insertion_point(field_release:red.hooks.messages.NoteInfo.addedToFile)
  
  return addedtofile_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NoteInfo::unsafe_arena_release_addedtofile() {
  // @@protoc_insertion_point(field_unsafe_arena_release:red.hooks.messages.NoteInfo.addedToFile)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return addedtofile_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void NoteInfo::set_allocated_addedtofile(::std::string* addedtofile) {
  if (addedtofile != NULL) {
    
  } else {
    
  }
  addedtofile_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addedtofile,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:red.hooks.messages.NoteInfo.addedToFile)
}
inline void NoteInfo::unsafe_arena_set_allocated_addedtofile(
    ::std::string* addedtofile) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (addedtofile != NULL) {
    
  } else {
    
  }
  addedtofile_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      addedtofile, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:red.hooks.messages.NoteInfo.addedToFile)
}

inline const NoteInfo* NoteInfo::internal_default_instance() {
  return &NoteInfo_default_instance_.get();
}
// -------------------------------------------------------------------

// Note

// optional string unid = 1;
inline void Note::clear_unid() {
  unid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Note::unid() const {
  // @@protoc_insertion_point(field_get:red.hooks.messages.Note.unid)
  return unid_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Note::set_unid(const ::std::string& value) {
  
  unid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:red.hooks.messages.Note.unid)
}
inline void Note::set_unid(const char* value) {
  
  unid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:red.hooks.messages.Note.unid)
}
inline void Note::set_unid(const char* value,
    size_t size) {
  
  unid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:red.hooks.messages.Note.unid)
}
inline ::std::string* Note::mutable_unid() {
  
  // @@protoc_insertion_point(field_mutable:red.hooks.messages.Note.unid)
  return unid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Note::release_unid() {
  // @@protoc_insertion_point(field_release:red.hooks.messages.Note.unid)
  
  return unid_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Note::unsafe_arena_release_unid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:red.hooks.messages.Note.unid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return unid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Note::set_allocated_unid(::std::string* unid) {
  if (unid != NULL) {
    
  } else {
    
  }
  unid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:red.hooks.messages.Note.unid)
}
inline void Note::unsafe_arena_set_allocated_unid(
    ::std::string* unid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (unid != NULL) {
    
  } else {
    
  }
  unid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      unid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:red.hooks.messages.Note.unid)
}

// optional uint64 noteId = 2;
inline void Note::clear_noteid() {
  noteid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Note::noteid() const {
  // @@protoc_insertion_point(field_get:red.hooks.messages.Note.noteId)
  return noteid_;
}
inline void Note::set_noteid(::google::protobuf::uint64 value) {
  
  noteid_ = value;
  // @@protoc_insertion_point(field_set:red.hooks.messages.Note.noteId)
}

// optional string dbId = 3;
inline void Note::clear_dbid() {
  dbid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Note::dbid() const {
  // @@protoc_insertion_point(field_get:red.hooks.messages.Note.dbId)
  return dbid_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Note::set_dbid(const ::std::string& value) {
  
  dbid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:red.hooks.messages.Note.dbId)
}
inline void Note::set_dbid(const char* value) {
  
  dbid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:red.hooks.messages.Note.dbId)
}
inline void Note::set_dbid(const char* value,
    size_t size) {
  
  dbid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:red.hooks.messages.Note.dbId)
}
inline ::std::string* Note::mutable_dbid() {
  
  // @@protoc_insertion_point(field_mutable:red.hooks.messages.Note.dbId)
  return dbid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Note::release_dbid() {
  // @@protoc_insertion_point(field_release:red.hooks.messages.Note.dbId)
  
  return dbid_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Note::unsafe_arena_release_dbid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:red.hooks.messages.Note.dbId)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return dbid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Note::set_allocated_dbid(::std::string* dbid) {
  if (dbid != NULL) {
    
  } else {
    
  }
  dbid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dbid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:red.hooks.messages.Note.dbId)
}
inline void Note::unsafe_arena_set_allocated_dbid(
    ::std::string* dbid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (dbid != NULL) {
    
  } else {
    
  }
  dbid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      dbid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:red.hooks.messages.Note.dbId)
}

// optional uint32 seqNum = 4;
inline void Note::clear_seqnum() {
  seqnum_ = 0u;
}
inline ::google::protobuf::uint32 Note::seqnum() const {
  // @@protoc_insertion_point(field_get:red.hooks.messages.Note.seqNum)
  return seqnum_;
}
inline void Note::set_seqnum(::google::protobuf::uint32 value) {
  
  seqnum_ = value;
  // @@protoc_insertion_point(field_set:red.hooks.messages.Note.seqNum)
}

// repeated .red.hooks.messages.Item items = 10;
inline int Note::items_size() const {
  return items_.size();
}
inline void Note::clear_items() {
  items_.Clear();
}
inline const ::red::hooks::messages::Item& Note::items(int index) const {
  // @@protoc_insertion_point(field_get:red.hooks.messages.Note.items)
  return items_.Get(index);
}
inline ::red::hooks::messages::Item* Note::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:red.hooks.messages.Note.items)
  return items_.Mutable(index);
}
inline ::red::hooks::messages::Item* Note::add_items() {
  // @@protoc_insertion_point(field_add:red.hooks.messages.Note.items)
  return items_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::red::hooks::messages::Item >*
Note::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:red.hooks.messages.Note.items)
  return &items_;
}
inline const ::google::protobuf::RepeatedPtrField< ::red::hooks::messages::Item >&
Note::items() const {
  // @@protoc_insertion_point(field_list:red.hooks.messages.Note.items)
  return items_;
}

inline const Note* Note::internal_default_instance() {
  return &Note_default_instance_.get();
}
// -------------------------------------------------------------------

// Item

// optional uint32 type = 1;
inline void Item::clear_type() {
  type_ = 0u;
}
inline ::google::protobuf::uint32 Item::type() const {
  // @@protoc_insertion_point(field_get:red.hooks.messages.Item.type)
  return type_;
}
inline void Item::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:red.hooks.messages.Item.type)
}

// optional string name = 4;
inline void Item::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Item::name() const {
  // @@protoc_insertion_point(field_get:red.hooks.messages.Item.name)
  return name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Item::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:red.hooks.messages.Item.name)
}
inline void Item::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:red.hooks.messages.Item.name)
}
inline void Item::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:red.hooks.messages.Item.name)
}
inline ::std::string* Item::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:red.hooks.messages.Item.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Item::release_name() {
  // @@protoc_insertion_point(field_release:red.hooks.messages.Item.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Item::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:red.hooks.messages.Item.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Item::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:red.hooks.messages.Item.name)
}
inline void Item::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:red.hooks.messages.Item.name)
}

// optional uint32 flags = 5;
inline void Item::clear_flags() {
  flags_ = 0u;
}
inline ::google::protobuf::uint32 Item::flags() const {
  // @@protoc_insertion_point(field_get:red.hooks.messages.Item.flags)
  return flags_;
}
inline void Item::set_flags(::google::protobuf::uint32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:red.hooks.messages.Item.flags)
}

// repeated string tvalue = 2;
inline int Item::tvalue_size() const {
  return tvalue_.size();
}
inline void Item::clear_tvalue() {
  tvalue_.Clear();
}
inline const ::std::string& Item::tvalue(int index) const {
  // @@protoc_insertion_point(field_get:red.hooks.messages.Item.tvalue)
  return tvalue_.Get(index);
}
inline ::std::string* Item::mutable_tvalue(int index) {
  // @@protoc_insertion_point(field_mutable:red.hooks.messages.Item.tvalue)
  return tvalue_.Mutable(index);
}
inline void Item::set_tvalue(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:red.hooks.messages.Item.tvalue)
  tvalue_.Mutable(index)->assign(value);
}
inline void Item::set_tvalue(int index, const char* value) {
  tvalue_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:red.hooks.messages.Item.tvalue)
}
inline void Item::set_tvalue(int index, const char* value, size_t size) {
  tvalue_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:red.hooks.messages.Item.tvalue)
}
inline ::std::string* Item::add_tvalue() {
  // @@protoc_insertion_point(field_add_mutable:red.hooks.messages.Item.tvalue)
  return tvalue_.Add();
}
inline void Item::add_tvalue(const ::std::string& value) {
  tvalue_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:red.hooks.messages.Item.tvalue)
}
inline void Item::add_tvalue(const char* value) {
  tvalue_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:red.hooks.messages.Item.tvalue)
}
inline void Item::add_tvalue(const char* value, size_t size) {
  tvalue_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:red.hooks.messages.Item.tvalue)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Item::tvalue() const {
  // @@protoc_insertion_point(field_list:red.hooks.messages.Item.tvalue)
  return tvalue_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Item::mutable_tvalue() {
  // @@protoc_insertion_point(field_mutable_list:red.hooks.messages.Item.tvalue)
  return &tvalue_;
}

// repeated uint64 nvalue = 3;
inline int Item::nvalue_size() const {
  return nvalue_.size();
}
inline void Item::clear_nvalue() {
  nvalue_.Clear();
}
inline ::google::protobuf::uint64 Item::nvalue(int index) const {
  // @@protoc_insertion_point(field_get:red.hooks.messages.Item.nvalue)
  return nvalue_.Get(index);
}
inline void Item::set_nvalue(int index, ::google::protobuf::uint64 value) {
  nvalue_.Set(index, value);
  // @@protoc_insertion_point(field_set:red.hooks.messages.Item.nvalue)
}
inline void Item::add_nvalue(::google::protobuf::uint64 value) {
  nvalue_.Add(value);
  // @@protoc_insertion_point(field_add:red.hooks.messages.Item.nvalue)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Item::nvalue() const {
  // @@protoc_insertion_point(field_list:red.hooks.messages.Item.nvalue)
  return nvalue_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Item::mutable_nvalue() {
  // @@protoc_insertion_point(field_mutable_list:red.hooks.messages.Item.nvalue)
  return &nvalue_;
}

inline const Item* Item::internal_default_instance() {
  return &Item_default_instance_.get();
}
// -------------------------------------------------------------------

// NoteCollection

inline const NoteCollection* NoteCollection::internal_default_instance() {
  return &NoteCollection_default_instance_.get();
}
// -------------------------------------------------------------------

// RequestNoteInfo

// optional string unid = 1;
inline void RequestNoteInfo::clear_unid() {
  unid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& RequestNoteInfo::unid() const {
  // @@protoc_insertion_point(field_get:red.hooks.messages.RequestNoteInfo.unid)
  return unid_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestNoteInfo::set_unid(const ::std::string& value) {
  
  unid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:red.hooks.messages.RequestNoteInfo.unid)
}
inline void RequestNoteInfo::set_unid(const char* value) {
  
  unid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:red.hooks.messages.RequestNoteInfo.unid)
}
inline void RequestNoteInfo::set_unid(const char* value,
    size_t size) {
  
  unid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:red.hooks.messages.RequestNoteInfo.unid)
}
inline ::std::string* RequestNoteInfo::mutable_unid() {
  
  // @@protoc_insertion_point(field_mutable:red.hooks.messages.RequestNoteInfo.unid)
  return unid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* RequestNoteInfo::release_unid() {
  // @@protoc_insertion_point(field_release:red.hooks.messages.RequestNoteInfo.unid)
  
  return unid_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* RequestNoteInfo::unsafe_arena_release_unid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:red.hooks.messages.RequestNoteInfo.unid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return unid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void RequestNoteInfo::set_allocated_unid(::std::string* unid) {
  if (unid != NULL) {
    
  } else {
    
  }
  unid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:red.hooks.messages.RequestNoteInfo.unid)
}
inline void RequestNoteInfo::unsafe_arena_set_allocated_unid(
    ::std::string* unid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (unid != NULL) {
    
  } else {
    
  }
  unid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      unid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:red.hooks.messages.RequestNoteInfo.unid)
}

// optional uint64 noteId = 2;
inline void RequestNoteInfo::clear_noteid() {
  noteid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RequestNoteInfo::noteid() const {
  // @@protoc_insertion_point(field_get:red.hooks.messages.RequestNoteInfo.noteId)
  return noteid_;
}
inline void RequestNoteInfo::set_noteid(::google::protobuf::uint64 value) {
  
  noteid_ = value;
  // @@protoc_insertion_point(field_set:red.hooks.messages.RequestNoteInfo.noteId)
}

// optional string dbId = 3;
inline void RequestNoteInfo::clear_dbid() {
  dbid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& RequestNoteInfo::dbid() const {
  // @@protoc_insertion_point(field_get:red.hooks.messages.RequestNoteInfo.dbId)
  return dbid_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestNoteInfo::set_dbid(const ::std::string& value) {
  
  dbid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:red.hooks.messages.RequestNoteInfo.dbId)
}
inline void RequestNoteInfo::set_dbid(const char* value) {
  
  dbid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:red.hooks.messages.RequestNoteInfo.dbId)
}
inline void RequestNoteInfo::set_dbid(const char* value,
    size_t size) {
  
  dbid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:red.hooks.messages.RequestNoteInfo.dbId)
}
inline ::std::string* RequestNoteInfo::mutable_dbid() {
  
  // @@protoc_insertion_point(field_mutable:red.hooks.messages.RequestNoteInfo.dbId)
  return dbid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* RequestNoteInfo::release_dbid() {
  // @@protoc_insertion_point(field_release:red.hooks.messages.RequestNoteInfo.dbId)
  
  return dbid_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* RequestNoteInfo::unsafe_arena_release_dbid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:red.hooks.messages.RequestNoteInfo.dbId)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return dbid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void RequestNoteInfo::set_allocated_dbid(::std::string* dbid) {
  if (dbid != NULL) {
    
  } else {
    
  }
  dbid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dbid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:red.hooks.messages.RequestNoteInfo.dbId)
}
inline void RequestNoteInfo::unsafe_arena_set_allocated_dbid(
    ::std::string* dbid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (dbid != NULL) {
    
  } else {
    
  }
  dbid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      dbid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:red.hooks.messages.RequestNoteInfo.dbId)
}

// optional .red.hooks.messages.Action action = 4;
inline void RequestNoteInfo::clear_action() {
  action_ = 0;
}
inline ::red::hooks::messages::Action RequestNoteInfo::action() const {
  // @@protoc_insertion_point(field_get:red.hooks.messages.RequestNoteInfo.action)
  return static_cast< ::red::hooks::messages::Action >(action_);
}
inline void RequestNoteInfo::set_action(::red::hooks::messages::Action value) {
  
  action_ = value;
  // @@protoc_insertion_point(field_set:red.hooks.messages.RequestNoteInfo.action)
}

inline const RequestNoteInfo* RequestNoteInfo::internal_default_instance() {
  return &RequestNoteInfo_default_instance_.get();
}
// -------------------------------------------------------------------

// RequestNote

// optional string unid = 1;
inline void RequestNote::clear_unid() {
  unid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& RequestNote::unid() const {
  // @@protoc_insertion_point(field_get:red.hooks.messages.RequestNote.unid)
  return unid_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestNote::set_unid(const ::std::string& value) {
  
  unid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:red.hooks.messages.RequestNote.unid)
}
inline void RequestNote::set_unid(const char* value) {
  
  unid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:red.hooks.messages.RequestNote.unid)
}
inline void RequestNote::set_unid(const char* value,
    size_t size) {
  
  unid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:red.hooks.messages.RequestNote.unid)
}
inline ::std::string* RequestNote::mutable_unid() {
  
  // @@protoc_insertion_point(field_mutable:red.hooks.messages.RequestNote.unid)
  return unid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* RequestNote::release_unid() {
  // @@protoc_insertion_point(field_release:red.hooks.messages.RequestNote.unid)
  
  return unid_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* RequestNote::unsafe_arena_release_unid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:red.hooks.messages.RequestNote.unid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return unid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void RequestNote::set_allocated_unid(::std::string* unid) {
  if (unid != NULL) {
    
  } else {
    
  }
  unid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:red.hooks.messages.RequestNote.unid)
}
inline void RequestNote::unsafe_arena_set_allocated_unid(
    ::std::string* unid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (unid != NULL) {
    
  } else {
    
  }
  unid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      unid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:red.hooks.messages.RequestNote.unid)
}

// optional uint64 noteId = 2;
inline void RequestNote::clear_noteid() {
  noteid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RequestNote::noteid() const {
  // @@protoc_insertion_point(field_get:red.hooks.messages.RequestNote.noteId)
  return noteid_;
}
inline void RequestNote::set_noteid(::google::protobuf::uint64 value) {
  
  noteid_ = value;
  // @@protoc_insertion_point(field_set:red.hooks.messages.RequestNote.noteId)
}

// optional string dbId = 3;
inline void RequestNote::clear_dbid() {
  dbid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& RequestNote::dbid() const {
  // @@protoc_insertion_point(field_get:red.hooks.messages.RequestNote.dbId)
  return dbid_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestNote::set_dbid(const ::std::string& value) {
  
  dbid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:red.hooks.messages.RequestNote.dbId)
}
inline void RequestNote::set_dbid(const char* value) {
  
  dbid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:red.hooks.messages.RequestNote.dbId)
}
inline void RequestNote::set_dbid(const char* value,
    size_t size) {
  
  dbid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:red.hooks.messages.RequestNote.dbId)
}
inline ::std::string* RequestNote::mutable_dbid() {
  
  // @@protoc_insertion_point(field_mutable:red.hooks.messages.RequestNote.dbId)
  return dbid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* RequestNote::release_dbid() {
  // @@protoc_insertion_point(field_release:red.hooks.messages.RequestNote.dbId)
  
  return dbid_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* RequestNote::unsafe_arena_release_dbid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:red.hooks.messages.RequestNote.dbId)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return dbid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void RequestNote::set_allocated_dbid(::std::string* dbid) {
  if (dbid != NULL) {
    
  } else {
    
  }
  dbid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dbid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:red.hooks.messages.RequestNote.dbId)
}
inline void RequestNote::unsafe_arena_set_allocated_dbid(
    ::std::string* dbid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (dbid != NULL) {
    
  } else {
    
  }
  dbid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      dbid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:red.hooks.messages.RequestNote.dbId)
}

// optional .red.hooks.messages.Action action = 4;
inline void RequestNote::clear_action() {
  action_ = 0;
}
inline ::red::hooks::messages::Action RequestNote::action() const {
  // @@protoc_insertion_point(field_get:red.hooks.messages.RequestNote.action)
  return static_cast< ::red::hooks::messages::Action >(action_);
}
inline void RequestNote::set_action(::red::hooks::messages::Action value) {
  
  action_ = value;
  // @@protoc_insertion_point(field_set:red.hooks.messages.RequestNote.action)
}

// optional uint32 seqNum = 5;
inline void RequestNote::clear_seqnum() {
  seqnum_ = 0u;
}
inline ::google::protobuf::uint32 RequestNote::seqnum() const {
  // @@protoc_insertion_point(field_get:red.hooks.messages.RequestNote.seqNum)
  return seqnum_;
}
inline void RequestNote::set_seqnum(::google::protobuf::uint32 value) {
  
  seqnum_ = value;
  // @@protoc_insertion_point(field_set:red.hooks.messages.RequestNote.seqNum)
}

// optional uint32 flags = 6;
inline void RequestNote::clear_flags() {
  flags_ = 0u;
}
inline ::google::protobuf::uint32 RequestNote::flags() const {
  // @@protoc_insertion_point(field_get:red.hooks.messages.RequestNote.flags)
  return flags_;
}
inline void RequestNote::set_flags(::google::protobuf::uint32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:red.hooks.messages.RequestNote.flags)
}

// repeated .red.hooks.messages.Item items = 10;
inline int RequestNote::items_size() const {
  return items_.size();
}
inline void RequestNote::clear_items() {
  items_.Clear();
}
inline const ::red::hooks::messages::Item& RequestNote::items(int index) const {
  // @@protoc_insertion_point(field_get:red.hooks.messages.RequestNote.items)
  return items_.Get(index);
}
inline ::red::hooks::messages::Item* RequestNote::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:red.hooks.messages.RequestNote.items)
  return items_.Mutable(index);
}
inline ::red::hooks::messages::Item* RequestNote::add_items() {
  // @@protoc_insertion_point(field_add:red.hooks.messages.RequestNote.items)
  return items_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::red::hooks::messages::Item >*
RequestNote::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:red.hooks.messages.RequestNote.items)
  return &items_;
}
inline const ::google::protobuf::RepeatedPtrField< ::red::hooks::messages::Item >&
RequestNote::items() const {
  // @@protoc_insertion_point(field_list:red.hooks.messages.RequestNote.items)
  return items_;
}

inline const RequestNote* RequestNote::internal_default_instance() {
  return &RequestNote_default_instance_.get();
}
// -------------------------------------------------------------------

// RequestNoteCollection

inline const RequestNoteCollection* RequestNoteCollection::internal_default_instance() {
  return &RequestNoteCollection_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace hooks
}  // namespace red

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::red::hooks::messages::Action> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::red::hooks::messages::Action>() {
  return ::red::hooks::messages::Action_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_notes_2eproto__INCLUDED
