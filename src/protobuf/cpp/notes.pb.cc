// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: notes.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "notes.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace red {
namespace hooks {
namespace messages {

namespace {

const ::google::protobuf::Descriptor* NoteInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NoteInfo_reflection_ = NULL;
struct NoteInfoOneofInstance {
  ::google::protobuf::internal::ArenaStringPtr unid_;
  ::google::protobuf::uint64 noteid_;
}* NoteInfo_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* Note_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Note_reflection_ = NULL;
struct NoteOneofInstance {
  ::google::protobuf::internal::ArenaStringPtr unid_;
  ::google::protobuf::uint64 noteid_;
}* Note_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* Item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_reflection_ = NULL;
const ::google::protobuf::Descriptor* NoteCollection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NoteCollection_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestNoteInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestNoteInfo_reflection_ = NULL;
struct RequestNoteInfoOneofInstance {
  ::google::protobuf::internal::ArenaStringPtr unid_;
  ::google::protobuf::uint64 noteid_;
}* RequestNoteInfo_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* RequestNote_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestNote_reflection_ = NULL;
struct RequestNoteOneofInstance {
  ::google::protobuf::internal::ArenaStringPtr unid_;
  ::google::protobuf::uint64 noteid_;
}* RequestNote_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* RequestNoteCollection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestNoteCollection_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Action_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_notes_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_notes_2eproto() {
  protobuf_AddDesc_notes_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "notes.proto");
  GOOGLE_CHECK(file != NULL);
  NoteInfo_descriptor_ = file->message_type(0);
  static const int NoteInfo_offsets_[11] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(NoteInfo_default_oneof_instance_, unid_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(NoteInfo_default_oneof_instance_, noteid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteInfo, dbid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteInfo, modified_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteInfo, classid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteInfo, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteInfo, accessed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteInfo, parentnoteid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteInfo, responsecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteInfo, addedtofile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteInfo, id_),
  };
  NoteInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NoteInfo_descriptor_,
      NoteInfo::internal_default_instance(),
      NoteInfo_offsets_,
      -1,
      -1,
      -1,
      NoteInfo_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteInfo, _oneof_case_[0]),
      sizeof(NoteInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteInfo, _internal_metadata_));
  Note_descriptor_ = file->message_type(1);
  static const int Note_offsets_[5] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Note_default_oneof_instance_, unid_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Note_default_oneof_instance_, noteid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Note, dbid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Note, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Note, id_),
  };
  Note_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Note_descriptor_,
      Note::internal_default_instance(),
      Note_offsets_,
      -1,
      -1,
      -1,
      Note_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Note, _oneof_case_[0]),
      sizeof(Note),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Note, _internal_metadata_));
  Item_descriptor_ = file->message_type(2);
  static const int Item_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, tvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, nvalue_),
  };
  Item_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Item_descriptor_,
      Item::internal_default_instance(),
      Item_offsets_,
      -1,
      -1,
      -1,
      sizeof(Item),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, _internal_metadata_));
  NoteCollection_descriptor_ = file->message_type(3);
  static const int NoteCollection_offsets_[1] = {
  };
  NoteCollection_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NoteCollection_descriptor_,
      NoteCollection::internal_default_instance(),
      NoteCollection_offsets_,
      -1,
      -1,
      -1,
      sizeof(NoteCollection),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteCollection, _internal_metadata_));
  RequestNoteInfo_descriptor_ = file->message_type(4);
  static const int RequestNoteInfo_offsets_[5] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RequestNoteInfo_default_oneof_instance_, unid_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RequestNoteInfo_default_oneof_instance_, noteid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestNoteInfo, dbid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestNoteInfo, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestNoteInfo, id_),
  };
  RequestNoteInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestNoteInfo_descriptor_,
      RequestNoteInfo::internal_default_instance(),
      RequestNoteInfo_offsets_,
      -1,
      -1,
      -1,
      RequestNoteInfo_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestNoteInfo, _oneof_case_[0]),
      sizeof(RequestNoteInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestNoteInfo, _internal_metadata_));
  RequestNote_descriptor_ = file->message_type(5);
  static const int RequestNote_offsets_[6] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RequestNote_default_oneof_instance_, unid_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RequestNote_default_oneof_instance_, noteid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestNote, dbid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestNote, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestNote, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestNote, id_),
  };
  RequestNote_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestNote_descriptor_,
      RequestNote::internal_default_instance(),
      RequestNote_offsets_,
      -1,
      -1,
      -1,
      RequestNote_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestNote, _oneof_case_[0]),
      sizeof(RequestNote),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestNote, _internal_metadata_));
  RequestNoteCollection_descriptor_ = file->message_type(6);
  static const int RequestNoteCollection_offsets_[1] = {
  };
  RequestNoteCollection_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestNoteCollection_descriptor_,
      RequestNoteCollection::internal_default_instance(),
      RequestNoteCollection_offsets_,
      -1,
      -1,
      -1,
      sizeof(RequestNoteCollection),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestNoteCollection, _internal_metadata_));
  Action_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_notes_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NoteInfo_descriptor_, NoteInfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Note_descriptor_, Note::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Item_descriptor_, Item::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NoteCollection_descriptor_, NoteCollection::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestNoteInfo_descriptor_, RequestNoteInfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestNote_descriptor_, RequestNote::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestNoteCollection_descriptor_, RequestNoteCollection::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_notes_2eproto() {
  NoteInfo_default_instance_.Shutdown();
  delete NoteInfo_default_oneof_instance_;
  delete NoteInfo_reflection_;
  Note_default_instance_.Shutdown();
  delete Note_default_oneof_instance_;
  delete Note_reflection_;
  Item_default_instance_.Shutdown();
  delete Item_reflection_;
  NoteCollection_default_instance_.Shutdown();
  delete NoteCollection_reflection_;
  RequestNoteInfo_default_instance_.Shutdown();
  delete RequestNoteInfo_default_oneof_instance_;
  delete RequestNoteInfo_reflection_;
  RequestNote_default_instance_.Shutdown();
  delete RequestNote_default_oneof_instance_;
  delete RequestNote_reflection_;
  RequestNoteCollection_default_instance_.Shutdown();
  delete RequestNoteCollection_reflection_;
}

void protobuf_InitDefaults_notes_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  NoteInfo_default_instance_.DefaultConstruct();
  NoteInfo_default_oneof_instance_ = new NoteInfoOneofInstance();
  ::google::protobuf::internal::GetEmptyString();
  Note_default_instance_.DefaultConstruct();
  Note_default_oneof_instance_ = new NoteOneofInstance();
  ::google::protobuf::internal::GetEmptyString();
  Item_default_instance_.DefaultConstruct();
  NoteCollection_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  RequestNoteInfo_default_instance_.DefaultConstruct();
  RequestNoteInfo_default_oneof_instance_ = new RequestNoteInfoOneofInstance();
  ::google::protobuf::internal::GetEmptyString();
  RequestNote_default_instance_.DefaultConstruct();
  RequestNote_default_oneof_instance_ = new RequestNoteOneofInstance();
  RequestNoteCollection_default_instance_.DefaultConstruct();
  NoteInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
  Note_default_instance_.get_mutable()->InitAsDefaultInstance();
  Item_default_instance_.get_mutable()->InitAsDefaultInstance();
  NoteCollection_default_instance_.get_mutable()->InitAsDefaultInstance();
  RequestNoteInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
  RequestNote_default_instance_.get_mutable()->InitAsDefaultInstance();
  RequestNoteCollection_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_notes_2eproto_once_);
void protobuf_InitDefaults_notes_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_notes_2eproto_once_,
                 &protobuf_InitDefaults_notes_2eproto_impl);
}
void protobuf_AddDesc_notes_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_notes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013notes.proto\022\022red.hooks.messages\"\314\001\n\010No"
    "teInfo\022\016\n\004unid\030\001 \001(\tH\000\022\020\n\006noteId\030\002 \001(\004H\000"
    "\022\014\n\004dbId\030\003 \001(\t\022\020\n\010modified\030\004 \001(\t\022\017\n\007clas"
    "sId\030\005 \001(\r\022\r\n\005flags\030\006 \001(\r\022\020\n\010accessed\030\007 \001"
    "(\t\022\024\n\014parentNoteId\030\010 \001(\004\022\025\n\rresponseCoun"
    "t\030\t \001(\004\022\023\n\013addedToFile\030\n \001(\tB\004\n\002idJ\004\010\013\020e"
    "\"q\n\004Note\022\016\n\004unid\030\001 \001(\tH\000\022\020\n\006noteId\030\002 \001(\004"
    "H\000\022\014\n\004dbId\030\003 \001(\t\022\'\n\005items\030\n \003(\0132\030.red.ho"
    "oks.messages.ItemB\004\n\002idJ\004\010\004\020\nJ\004\010\013\020e\"W\n\004I"
    "tem\022\014\n\004type\030\001 \001(\r\022\014\n\004name\030\004 \001(\t\022\r\n\005flags"
    "\030\005 \001(\r\022\016\n\006tvalue\030\002 \003(\t\022\016\n\006nvalue\030\003 \003(\004J\004"
    "\010\006\020e\"\026\n\016NoteCollectionJ\004\010\001\020e\"y\n\017RequestN"
    "oteInfo\022\016\n\004unid\030\001 \001(\tH\000\022\020\n\006noteId\030\002 \001(\004H"
    "\000\022\014\n\004dbId\030\003 \001(\t\022*\n\006action\030\004 \001(\0162\032.red.ho"
    "oks.messages.ActionB\004\n\002idJ\004\010\005\020e\"\244\001\n\013Requ"
    "estNote\022\016\n\004unid\030\001 \001(\tH\000\022\020\n\006noteId\030\002 \001(\004H"
    "\000\022\014\n\004dbId\030\003 \001(\t\022*\n\006action\030\004 \001(\0162\032.red.ho"
    "oks.messages.Action\022\'\n\005items\030\n \003(\0132\030.red"
    ".hooks.messages.ItemB\004\n\002idJ\004\010\005\020\nJ\004\010\013\020e\"\035"
    "\n\025RequestNoteCollectionJ\004\010\001\020e**\n\006Action\022"
    "\010\n\004READ\020\000\022\n\n\006UPDATE\020\001\022\n\n\006REMOVE\020\002B%\n org"
    ".openntf.red.network.messages\370\001\001b\006proto3", 880);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "notes.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_notes_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_notes_2eproto_once_);
void protobuf_AddDesc_notes_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_notes_2eproto_once_,
                 &protobuf_AddDesc_notes_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_notes_2eproto {
  StaticDescriptorInitializer_notes_2eproto() {
    protobuf_AddDesc_notes_2eproto();
  }
} static_descriptor_initializer_notes_2eproto_;
const ::google::protobuf::EnumDescriptor* Action_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Action_descriptor_;
}
bool Action_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NoteInfo::kUnidFieldNumber;
const int NoteInfo::kNoteIdFieldNumber;
const int NoteInfo::kDbIdFieldNumber;
const int NoteInfo::kModifiedFieldNumber;
const int NoteInfo::kClassIdFieldNumber;
const int NoteInfo::kFlagsFieldNumber;
const int NoteInfo::kAccessedFieldNumber;
const int NoteInfo::kParentNoteIdFieldNumber;
const int NoteInfo::kResponseCountFieldNumber;
const int NoteInfo::kAddedToFileFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NoteInfo::NoteInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_notes_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:red.hooks.messages.NoteInfo)
}
NoteInfo::NoteInfo(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_notes_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:red.hooks.messages.NoteInfo)
}

void NoteInfo::InitAsDefaultInstance() {
  NoteInfo_default_oneof_instance_->unid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  NoteInfo_default_oneof_instance_->noteid_ = GOOGLE_ULONGLONG(0);
}

NoteInfo::NoteInfo(const NoteInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:red.hooks.messages.NoteInfo)
}

void NoteInfo::SharedCtor() {
  dbid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  modified_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accessed_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addedtofile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&classid_, 0, reinterpret_cast<char*>(&responsecount_) -
    reinterpret_cast<char*>(&classid_) + sizeof(responsecount_));
  clear_has_id();
  _cached_size_ = 0;
}

NoteInfo::~NoteInfo() {
  // @@protoc_insertion_point(destructor:red.hooks.messages.NoteInfo)
  SharedDtor();
}

void NoteInfo::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  dbid_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  modified_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  accessed_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  addedtofile_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (has_id()) {
    clear_id();
  }
}

void NoteInfo::ArenaDtor(void* object) {
  NoteInfo* _this = reinterpret_cast< NoteInfo* >(object);
  (void)_this;
}
void NoteInfo::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void NoteInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NoteInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NoteInfo_descriptor_;
}

const NoteInfo& NoteInfo::default_instance() {
  protobuf_InitDefaults_notes_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<NoteInfo> NoteInfo_default_instance_;

NoteInfo* NoteInfo::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<NoteInfo>(arena);
}

void NoteInfo::clear_id() {
// @@protoc_insertion_point(one_of_clear_start:red.hooks.messages.NoteInfo)
  switch (id_case()) {
    case kUnid: {
      id_.unid_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
          GetArenaNoVirtual());
      break;
    }
    case kNoteId: {
      // No need to clear
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ID_NOT_SET;
}


void NoteInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:red.hooks.messages.NoteInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(NoteInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<NoteInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(classid_, parentnoteid_);
  dbid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  modified_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  accessed_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  responsecount_ = GOOGLE_ULONGLONG(0);
  addedtofile_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());

#undef ZR_HELPER_
#undef ZR_

  clear_id();
}

bool NoteInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:red.hooks.messages.NoteInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string unid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->unid().data(), this->unid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "red.hooks.messages.NoteInfo.unid"));
        } else {
          goto handle_unusual;
        }
        goto after_noteid;
        break;
      }

      // optional uint64 noteId = 2;
      case 2: {
        if (tag == 16) {
          clear_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_.noteid_)));
          set_has_noteid();
        } else {
          goto handle_unusual;
        }
       after_noteid:
        if (input->ExpectTag(26)) goto parse_dbId;
        break;
      }

      // optional string dbId = 3;
      case 3: {
        if (tag == 26) {
         parse_dbId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dbid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dbid().data(), this->dbid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "red.hooks.messages.NoteInfo.dbId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_modified;
        break;
      }

      // optional string modified = 4;
      case 4: {
        if (tag == 34) {
         parse_modified:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_modified()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->modified().data(), this->modified().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "red.hooks.messages.NoteInfo.modified"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_classId;
        break;
      }

      // optional uint32 classId = 5;
      case 5: {
        if (tag == 40) {
         parse_classId:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &classid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_flags;
        break;
      }

      // optional uint32 flags = 6;
      case 6: {
        if (tag == 48) {
         parse_flags:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_accessed;
        break;
      }

      // optional string accessed = 7;
      case 7: {
        if (tag == 58) {
         parse_accessed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accessed()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->accessed().data(), this->accessed().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "red.hooks.messages.NoteInfo.accessed"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_parentNoteId;
        break;
      }

      // optional uint64 parentNoteId = 8;
      case 8: {
        if (tag == 64) {
         parse_parentNoteId:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &parentnoteid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_responseCount;
        break;
      }

      // optional uint64 responseCount = 9;
      case 9: {
        if (tag == 72) {
         parse_responseCount:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &responsecount_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_addedToFile;
        break;
      }

      // optional string addedToFile = 10;
      case 10: {
        if (tag == 82) {
         parse_addedToFile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addedtofile()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->addedtofile().data(), this->addedtofile().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "red.hooks.messages.NoteInfo.addedToFile"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:red.hooks.messages.NoteInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:red.hooks.messages.NoteInfo)
  return false;
#undef DO_
}

void NoteInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:red.hooks.messages.NoteInfo)
  // optional string unid = 1;
  if (has_unid()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->unid().data(), this->unid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "red.hooks.messages.NoteInfo.unid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->unid(), output);
  }

  // optional uint64 noteId = 2;
  if (has_noteid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->noteid(), output);
  }

  // optional string dbId = 3;
  if (this->dbid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dbid().data(), this->dbid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "red.hooks.messages.NoteInfo.dbId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->dbid(), output);
  }

  // optional string modified = 4;
  if (this->modified().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->modified().data(), this->modified().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "red.hooks.messages.NoteInfo.modified");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->modified(), output);
  }

  // optional uint32 classId = 5;
  if (this->classid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->classid(), output);
  }

  // optional uint32 flags = 6;
  if (this->flags() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->flags(), output);
  }

  // optional string accessed = 7;
  if (this->accessed().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->accessed().data(), this->accessed().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "red.hooks.messages.NoteInfo.accessed");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->accessed(), output);
  }

  // optional uint64 parentNoteId = 8;
  if (this->parentnoteid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->parentnoteid(), output);
  }

  // optional uint64 responseCount = 9;
  if (this->responsecount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->responsecount(), output);
  }

  // optional string addedToFile = 10;
  if (this->addedtofile().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addedtofile().data(), this->addedtofile().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "red.hooks.messages.NoteInfo.addedToFile");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->addedtofile(), output);
  }

  // @@protoc_insertion_point(serialize_end:red.hooks.messages.NoteInfo)
}

::google::protobuf::uint8* NoteInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:red.hooks.messages.NoteInfo)
  // optional string unid = 1;
  if (has_unid()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->unid().data(), this->unid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "red.hooks.messages.NoteInfo.unid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->unid(), target);
  }

  // optional uint64 noteId = 2;
  if (has_noteid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->noteid(), target);
  }

  // optional string dbId = 3;
  if (this->dbid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dbid().data(), this->dbid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "red.hooks.messages.NoteInfo.dbId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->dbid(), target);
  }

  // optional string modified = 4;
  if (this->modified().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->modified().data(), this->modified().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "red.hooks.messages.NoteInfo.modified");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->modified(), target);
  }

  // optional uint32 classId = 5;
  if (this->classid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->classid(), target);
  }

  // optional uint32 flags = 6;
  if (this->flags() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->flags(), target);
  }

  // optional string accessed = 7;
  if (this->accessed().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->accessed().data(), this->accessed().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "red.hooks.messages.NoteInfo.accessed");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->accessed(), target);
  }

  // optional uint64 parentNoteId = 8;
  if (this->parentnoteid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->parentnoteid(), target);
  }

  // optional uint64 responseCount = 9;
  if (this->responsecount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->responsecount(), target);
  }

  // optional string addedToFile = 10;
  if (this->addedtofile().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addedtofile().data(), this->addedtofile().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "red.hooks.messages.NoteInfo.addedToFile");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->addedtofile(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:red.hooks.messages.NoteInfo)
  return target;
}

size_t NoteInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:red.hooks.messages.NoteInfo)
  size_t total_size = 0;

  // optional string dbId = 3;
  if (this->dbid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dbid());
  }

  // optional string modified = 4;
  if (this->modified().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->modified());
  }

  // optional uint32 classId = 5;
  if (this->classid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->classid());
  }

  // optional uint32 flags = 6;
  if (this->flags() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flags());
  }

  // optional string accessed = 7;
  if (this->accessed().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->accessed());
  }

  // optional uint64 parentNoteId = 8;
  if (this->parentnoteid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->parentnoteid());
  }

  // optional uint64 responseCount = 9;
  if (this->responsecount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->responsecount());
  }

  // optional string addedToFile = 10;
  if (this->addedtofile().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->addedtofile());
  }

  switch (id_case()) {
    // optional string unid = 1;
    case kUnid: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unid());
      break;
    }
    // optional uint64 noteId = 2;
    case kNoteId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->noteid());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NoteInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:red.hooks.messages.NoteInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NoteInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NoteInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:red.hooks.messages.NoteInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:red.hooks.messages.NoteInfo)
    UnsafeMergeFrom(*source);
  }
}

void NoteInfo::MergeFrom(const NoteInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:red.hooks.messages.NoteInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void NoteInfo::UnsafeMergeFrom(const NoteInfo& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.id_case()) {
    case kUnid: {
      set_unid(from.unid());
      break;
    }
    case kNoteId: {
      set_noteid(from.noteid());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  if (from.dbid().size() > 0) {
    set_dbid(from.dbid());
  }
  if (from.modified().size() > 0) {
    set_modified(from.modified());
  }
  if (from.classid() != 0) {
    set_classid(from.classid());
  }
  if (from.flags() != 0) {
    set_flags(from.flags());
  }
  if (from.accessed().size() > 0) {
    set_accessed(from.accessed());
  }
  if (from.parentnoteid() != 0) {
    set_parentnoteid(from.parentnoteid());
  }
  if (from.responsecount() != 0) {
    set_responsecount(from.responsecount());
  }
  if (from.addedtofile().size() > 0) {
    set_addedtofile(from.addedtofile());
  }
}

void NoteInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:red.hooks.messages.NoteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NoteInfo::CopyFrom(const NoteInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:red.hooks.messages.NoteInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool NoteInfo::IsInitialized() const {

  return true;
}

void NoteInfo::Swap(NoteInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    NoteInfo temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void NoteInfo::UnsafeArenaSwap(NoteInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void NoteInfo::InternalSwap(NoteInfo* other) {
  dbid_.Swap(&other->dbid_);
  modified_.Swap(&other->modified_);
  std::swap(classid_, other->classid_);
  std::swap(flags_, other->flags_);
  accessed_.Swap(&other->accessed_);
  std::swap(parentnoteid_, other->parentnoteid_);
  std::swap(responsecount_, other->responsecount_);
  addedtofile_.Swap(&other->addedtofile_);
  std::swap(id_, other->id_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NoteInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NoteInfo_descriptor_;
  metadata.reflection = NoteInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NoteInfo

// optional string unid = 1;
bool NoteInfo::has_unid() const {
  return id_case() == kUnid;
}
void NoteInfo::set_has_unid() {
  _oneof_case_[0] = kUnid;
}
void NoteInfo::clear_unid() {
  if (has_unid()) {
    id_.unid_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
    clear_has_id();
  }
}
const ::std::string& NoteInfo::unid() const {
  // @@protoc_insertion_point(field_get:red.hooks.messages.NoteInfo.unid)
  if (has_unid()) {
    return id_.unid_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void NoteInfo::set_unid(const ::std::string& value) {
  if (!has_unid()) {
    clear_id();
    set_has_unid();
    id_.unid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.unid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:red.hooks.messages.NoteInfo.unid)
}
void NoteInfo::set_unid(const char* value) {
  if (!has_unid()) {
    clear_id();
    set_has_unid();
    id_.unid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.unid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:red.hooks.messages.NoteInfo.unid)
}
void NoteInfo::set_unid(const char* value,
                             size_t size) {
  if (!has_unid()) {
    clear_id();
    set_has_unid();
    id_.unid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.unid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:red.hooks.messages.NoteInfo.unid)
}
::std::string* NoteInfo::mutable_unid() {
  if (!has_unid()) {
    clear_id();
    set_has_unid();
    id_.unid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return id_.unid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_mutable:red.hooks.messages.NoteInfo.unid)
}
::std::string* NoteInfo::release_unid() {
  // @@protoc_insertion_point(field_release:red.hooks.messages.NoteInfo.unid)
  if (has_unid()) {
    clear_has_id();
    return id_.unid_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
::std::string* NoteInfo::unsafe_arena_release_unid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:red.hooks.messages.NoteInfo.unid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (has_unid()) {
    clear_has_id();
    return id_.unid_.UnsafeArenaRelease(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
void NoteInfo::set_allocated_unid(::std::string* unid) {
  if (!has_unid()) {
    id_.unid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (unid != NULL) {
    set_has_unid();
    id_.unid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unid,
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_set_allocated:red.hooks.messages.NoteInfo.unid)
}
void NoteInfo::unsafe_arena_set_allocated_unid(::std::string* unid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (!has_unid()) {
    id_.unid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (unid) {
    set_has_unid();
    id_.unid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unid, GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:red.hooks.messages.NoteInfo.unid)
}

// optional uint64 noteId = 2;
bool NoteInfo::has_noteid() const {
  return id_case() == kNoteId;
}
void NoteInfo::set_has_noteid() {
  _oneof_case_[0] = kNoteId;
}
void NoteInfo::clear_noteid() {
  if (has_noteid()) {
    id_.noteid_ = GOOGLE_ULONGLONG(0);
    clear_has_id();
  }
}
::google::protobuf::uint64 NoteInfo::noteid() const {
  // @@protoc_insertion_point(field_get:red.hooks.messages.NoteInfo.noteId)
  if (has_noteid()) {
    return id_.noteid_;
  }
  return GOOGLE_ULONGLONG(0);
}
void NoteInfo::set_noteid(::google::protobuf::uint64 value) {
  if (!has_noteid()) {
    clear_id();
    set_has_noteid();
  }
  id_.noteid_ = value;
  // @@protoc_insertion_point(field_set:red.hooks.messages.NoteInfo.noteId)
}

// optional string dbId = 3;
void NoteInfo::clear_dbid() {
  dbid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& NoteInfo::dbid() const {
  // @@protoc_insertion_point(field_get:red.hooks.messages.NoteInfo.dbId)
  return dbid_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NoteInfo::set_dbid(const ::std::string& value) {
  
  dbid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:red.hooks.messages.NoteInfo.dbId)
}
void NoteInfo::set_dbid(const char* value) {
  
  dbid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:red.hooks.messages.NoteInfo.dbId)
}
void NoteInfo::set_dbid(const char* value,
    size_t size) {
  
  dbid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:red.hooks.messages.NoteInfo.dbId)
}
::std::string* NoteInfo::mutable_dbid() {
  
  // @@protoc_insertion_point(field_mutable:red.hooks.messages.NoteInfo.dbId)
  return dbid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NoteInfo::release_dbid() {
  // @@protoc_insertion_point(field_release:red.hooks.messages.NoteInfo.dbId)
  
  return dbid_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NoteInfo::unsafe_arena_release_dbid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:red.hooks.messages.NoteInfo.dbId)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return dbid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void NoteInfo::set_allocated_dbid(::std::string* dbid) {
  if (dbid != NULL) {
    
  } else {
    
  }
  dbid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dbid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:red.hooks.messages.NoteInfo.dbId)
}
void NoteInfo::unsafe_arena_set_allocated_dbid(
    ::std::string* dbid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (dbid != NULL) {
    
  } else {
    
  }
  dbid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      dbid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:red.hooks.messages.NoteInfo.dbId)
}

// optional string modified = 4;
void NoteInfo::clear_modified() {
  modified_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& NoteInfo::modified() const {
  // @@protoc_insertion_point(field_get:red.hooks.messages.NoteInfo.modified)
  return modified_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NoteInfo::set_modified(const ::std::string& value) {
  
  modified_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:red.hooks.messages.NoteInfo.modified)
}
void NoteInfo::set_modified(const char* value) {
  
  modified_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:red.hooks.messages.NoteInfo.modified)
}
void NoteInfo::set_modified(const char* value,
    size_t size) {
  
  modified_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:red.hooks.messages.NoteInfo.modified)
}
::std::string* NoteInfo::mutable_modified() {
  
  // @@protoc_insertion_point(field_mutable:red.hooks.messages.NoteInfo.modified)
  return modified_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NoteInfo::release_modified() {
  // @@protoc_insertion_point(field_release:red.hooks.messages.NoteInfo.modified)
  
  return modified_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NoteInfo::unsafe_arena_release_modified() {
  // @@protoc_insertion_point(field_unsafe_arena_release:red.hooks.messages.NoteInfo.modified)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return modified_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void NoteInfo::set_allocated_modified(::std::string* modified) {
  if (modified != NULL) {
    
  } else {
    
  }
  modified_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), modified,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:red.hooks.messages.NoteInfo.modified)
}
void NoteInfo::unsafe_arena_set_allocated_modified(
    ::std::string* modified) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (modified != NULL) {
    
  } else {
    
  }
  modified_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      modified, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:red.hooks.messages.NoteInfo.modified)
}

// optional uint32 classId = 5;
void NoteInfo::clear_classid() {
  classid_ = 0u;
}
::google::protobuf::uint32 NoteInfo::classid() const {
  // @@protoc_insertion_point(field_get:red.hooks.messages.NoteInfo.classId)
  return classid_;
}
void NoteInfo::set_classid(::google::protobuf::uint32 value) {
  
  classid_ = value;
  // @@protoc_insertion_point(field_set:red.hooks.messages.NoteInfo.classId)
}

// optional uint32 flags = 6;
void NoteInfo::clear_flags() {
  flags_ = 0u;
}
::google::protobuf::uint32 NoteInfo::flags() const {
  // @@protoc_insertion_point(field_get:red.hooks.messages.NoteInfo.flags)
  return flags_;
}
void NoteInfo::set_flags(::google::protobuf::uint32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:red.hooks.messages.NoteInfo.flags)
}

// optional string accessed = 7;
void NoteInfo::clear_accessed() {
  accessed_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& NoteInfo::accessed() const {
  // @@protoc_insertion_point(field_get:red.hooks.messages.NoteInfo.accessed)
  return accessed_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NoteInfo::set_accessed(const ::std::string& value) {
  
  accessed_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:red.hooks.messages.NoteInfo.accessed)
}
void NoteInfo::set_accessed(const char* value) {
  
  accessed_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:red.hooks.messages.NoteInfo.accessed)
}
void NoteInfo::set_accessed(const char* value,
    size_t size) {
  
  accessed_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:red.hooks.messages.NoteInfo.accessed)
}
::std::string* NoteInfo::mutable_accessed() {
  
  // @@protoc_insertion_point(field_mutable:red.hooks.messages.NoteInfo.accessed)
  return accessed_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NoteInfo::release_accessed() {
  // @@protoc_insertion_point(field_release:red.hooks.messages.NoteInfo.accessed)
  
  return accessed_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NoteInfo::unsafe_arena_release_accessed() {
  // @@protoc_insertion_point(field_unsafe_arena_release:red.hooks.messages.NoteInfo.accessed)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return accessed_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void NoteInfo::set_allocated_accessed(::std::string* accessed) {
  if (accessed != NULL) {
    
  } else {
    
  }
  accessed_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), accessed,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:red.hooks.messages.NoteInfo.accessed)
}
void NoteInfo::unsafe_arena_set_allocated_accessed(
    ::std::string* accessed) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (accessed != NULL) {
    
  } else {
    
  }
  accessed_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      accessed, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:red.hooks.messages.NoteInfo.accessed)
}

// optional uint64 parentNoteId = 8;
void NoteInfo::clear_parentnoteid() {
  parentnoteid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 NoteInfo::parentnoteid() const {
  // @@protoc_insertion_point(field_get:red.hooks.messages.NoteInfo.parentNoteId)
  return parentnoteid_;
}
void NoteInfo::set_parentnoteid(::google::protobuf::uint64 value) {
  
  parentnoteid_ = value;
  // @@protoc_insertion_point(field_set:red.hooks.messages.NoteInfo.parentNoteId)
}

// optional uint64 responseCount = 9;
void NoteInfo::clear_responsecount() {
  responsecount_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 NoteInfo::responsecount() const {
  // @@protoc_insertion_point(field_get:red.hooks.messages.NoteInfo.responseCount)
  return responsecount_;
}
void NoteInfo::set_responsecount(::google::protobuf::uint64 value) {
  
  responsecount_ = value;
  // @@protoc_insertion_point(field_set:red.hooks.messages.NoteInfo.responseCount)
}

// optional string addedToFile = 10;
void NoteInfo::clear_addedtofile() {
  addedtofile_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& NoteInfo::addedtofile() const {
  // @@protoc_insertion_point(field_get:red.hooks.messages.NoteInfo.addedToFile)
  return addedtofile_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NoteInfo::set_addedtofile(const ::std::string& value) {
  
  addedtofile_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:red.hooks.messages.NoteInfo.addedToFile)
}
void NoteInfo::set_addedtofile(const char* value) {
  
  addedtofile_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:red.hooks.messages.NoteInfo.addedToFile)
}
void NoteInfo::set_addedtofile(const char* value,
    size_t size) {
  
  addedtofile_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:red.hooks.messages.NoteInfo.addedToFile)
}
::std::string* NoteInfo::mutable_addedtofile() {
  
  // @@protoc_insertion_point(field_mutable:red.hooks.messages.NoteInfo.addedToFile)
  return addedtofile_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NoteInfo::release_addedtofile() {
  // @@protoc_insertion_point(field_release:red.hooks.messages.NoteInfo.addedToFile)
  
  return addedtofile_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NoteInfo::unsafe_arena_release_addedtofile() {
  // @@protoc_insertion_point(field_unsafe_arena_release:red.hooks.messages.NoteInfo.addedToFile)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return addedtofile_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void NoteInfo::set_allocated_addedtofile(::std::string* addedtofile) {
  if (addedtofile != NULL) {
    
  } else {
    
  }
  addedtofile_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addedtofile,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:red.hooks.messages.NoteInfo.addedToFile)
}
void NoteInfo::unsafe_arena_set_allocated_addedtofile(
    ::std::string* addedtofile) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (addedtofile != NULL) {
    
  } else {
    
  }
  addedtofile_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      addedtofile, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:red.hooks.messages.NoteInfo.addedToFile)
}

bool NoteInfo::has_id() const {
  return id_case() != ID_NOT_SET;
}
void NoteInfo::clear_has_id() {
  _oneof_case_[0] = ID_NOT_SET;
}
NoteInfo::IdCase NoteInfo::id_case() const {
  return NoteInfo::IdCase(_oneof_case_[0]);
}
inline const NoteInfo* NoteInfo::internal_default_instance() {
  return &NoteInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Note::kUnidFieldNumber;
const int Note::kNoteIdFieldNumber;
const int Note::kDbIdFieldNumber;
const int Note::kItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Note::Note()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_notes_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:red.hooks.messages.Note)
}
Note::Note(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  items_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_notes_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:red.hooks.messages.Note)
}

void Note::InitAsDefaultInstance() {
  Note_default_oneof_instance_->unid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  Note_default_oneof_instance_->noteid_ = GOOGLE_ULONGLONG(0);
}

Note::Note(const Note& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:red.hooks.messages.Note)
}

void Note::SharedCtor() {
  dbid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
  _cached_size_ = 0;
}

Note::~Note() {
  // @@protoc_insertion_point(destructor:red.hooks.messages.Note)
  SharedDtor();
}

void Note::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  dbid_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (has_id()) {
    clear_id();
  }
}

void Note::ArenaDtor(void* object) {
  Note* _this = reinterpret_cast< Note* >(object);
  (void)_this;
}
void Note::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Note::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Note::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Note_descriptor_;
}

const Note& Note::default_instance() {
  protobuf_InitDefaults_notes_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Note> Note_default_instance_;

Note* Note::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Note>(arena);
}

void Note::clear_id() {
// @@protoc_insertion_point(one_of_clear_start:red.hooks.messages.Note)
  switch (id_case()) {
    case kUnid: {
      id_.unid_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
          GetArenaNoVirtual());
      break;
    }
    case kNoteId: {
      // No need to clear
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ID_NOT_SET;
}


void Note::Clear() {
// @@protoc_insertion_point(message_clear_start:red.hooks.messages.Note)
  dbid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  items_.Clear();
  clear_id();
}

bool Note::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:red.hooks.messages.Note)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string unid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->unid().data(), this->unid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "red.hooks.messages.Note.unid"));
        } else {
          goto handle_unusual;
        }
        goto after_noteid;
        break;
      }

      // optional uint64 noteId = 2;
      case 2: {
        if (tag == 16) {
          clear_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_.noteid_)));
          set_has_noteid();
        } else {
          goto handle_unusual;
        }
       after_noteid:
        if (input->ExpectTag(26)) goto parse_dbId;
        break;
      }

      // optional string dbId = 3;
      case 3: {
        if (tag == 26) {
         parse_dbId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dbid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dbid().data(), this->dbid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "red.hooks.messages.Note.dbId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_items;
        break;
      }

      // repeated .red.hooks.messages.Item items = 10;
      case 10: {
        if (tag == 82) {
         parse_items:
          DO_(input->IncrementRecursionDepth());
         parse_loop_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_loop_items;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:red.hooks.messages.Note)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:red.hooks.messages.Note)
  return false;
#undef DO_
}

void Note::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:red.hooks.messages.Note)
  // optional string unid = 1;
  if (has_unid()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->unid().data(), this->unid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "red.hooks.messages.Note.unid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->unid(), output);
  }

  // optional uint64 noteId = 2;
  if (has_noteid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->noteid(), output);
  }

  // optional string dbId = 3;
  if (this->dbid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dbid().data(), this->dbid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "red.hooks.messages.Note.dbId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->dbid(), output);
  }

  // repeated .red.hooks.messages.Item items = 10;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->items(i), output);
  }

  // @@protoc_insertion_point(serialize_end:red.hooks.messages.Note)
}

::google::protobuf::uint8* Note::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:red.hooks.messages.Note)
  // optional string unid = 1;
  if (has_unid()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->unid().data(), this->unid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "red.hooks.messages.Note.unid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->unid(), target);
  }

  // optional uint64 noteId = 2;
  if (has_noteid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->noteid(), target);
  }

  // optional string dbId = 3;
  if (this->dbid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dbid().data(), this->dbid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "red.hooks.messages.Note.dbId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->dbid(), target);
  }

  // repeated .red.hooks.messages.Item items = 10;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->items(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:red.hooks.messages.Note)
  return target;
}

size_t Note::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:red.hooks.messages.Note)
  size_t total_size = 0;

  // optional string dbId = 3;
  if (this->dbid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dbid());
  }

  // repeated .red.hooks.messages.Item items = 10;
  {
    unsigned int count = this->items_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->items(i));
    }
  }

  switch (id_case()) {
    // optional string unid = 1;
    case kUnid: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unid());
      break;
    }
    // optional uint64 noteId = 2;
    case kNoteId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->noteid());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Note::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:red.hooks.messages.Note)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Note* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Note>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:red.hooks.messages.Note)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:red.hooks.messages.Note)
    UnsafeMergeFrom(*source);
  }
}

void Note::MergeFrom(const Note& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:red.hooks.messages.Note)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Note::UnsafeMergeFrom(const Note& from) {
  GOOGLE_DCHECK(&from != this);
  items_.MergeFrom(from.items_);
  switch (from.id_case()) {
    case kUnid: {
      set_unid(from.unid());
      break;
    }
    case kNoteId: {
      set_noteid(from.noteid());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  if (from.dbid().size() > 0) {
    set_dbid(from.dbid());
  }
}

void Note::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:red.hooks.messages.Note)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Note::CopyFrom(const Note& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:red.hooks.messages.Note)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Note::IsInitialized() const {

  return true;
}

void Note::Swap(Note* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Note temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void Note::UnsafeArenaSwap(Note* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Note::InternalSwap(Note* other) {
  dbid_.Swap(&other->dbid_);
  items_.UnsafeArenaSwap(&other->items_);
  std::swap(id_, other->id_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Note::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Note_descriptor_;
  metadata.reflection = Note_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Note

// optional string unid = 1;
bool Note::has_unid() const {
  return id_case() == kUnid;
}
void Note::set_has_unid() {
  _oneof_case_[0] = kUnid;
}
void Note::clear_unid() {
  if (has_unid()) {
    id_.unid_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
    clear_has_id();
  }
}
const ::std::string& Note::unid() const {
  // @@protoc_insertion_point(field_get:red.hooks.messages.Note.unid)
  if (has_unid()) {
    return id_.unid_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void Note::set_unid(const ::std::string& value) {
  if (!has_unid()) {
    clear_id();
    set_has_unid();
    id_.unid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.unid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:red.hooks.messages.Note.unid)
}
void Note::set_unid(const char* value) {
  if (!has_unid()) {
    clear_id();
    set_has_unid();
    id_.unid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.unid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:red.hooks.messages.Note.unid)
}
void Note::set_unid(const char* value,
                             size_t size) {
  if (!has_unid()) {
    clear_id();
    set_has_unid();
    id_.unid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.unid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:red.hooks.messages.Note.unid)
}
::std::string* Note::mutable_unid() {
  if (!has_unid()) {
    clear_id();
    set_has_unid();
    id_.unid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return id_.unid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_mutable:red.hooks.messages.Note.unid)
}
::std::string* Note::release_unid() {
  // @@protoc_insertion_point(field_release:red.hooks.messages.Note.unid)
  if (has_unid()) {
    clear_has_id();
    return id_.unid_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
::std::string* Note::unsafe_arena_release_unid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:red.hooks.messages.Note.unid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (has_unid()) {
    clear_has_id();
    return id_.unid_.UnsafeArenaRelease(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
void Note::set_allocated_unid(::std::string* unid) {
  if (!has_unid()) {
    id_.unid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (unid != NULL) {
    set_has_unid();
    id_.unid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unid,
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_set_allocated:red.hooks.messages.Note.unid)
}
void Note::unsafe_arena_set_allocated_unid(::std::string* unid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (!has_unid()) {
    id_.unid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (unid) {
    set_has_unid();
    id_.unid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unid, GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:red.hooks.messages.Note.unid)
}

// optional uint64 noteId = 2;
bool Note::has_noteid() const {
  return id_case() == kNoteId;
}
void Note::set_has_noteid() {
  _oneof_case_[0] = kNoteId;
}
void Note::clear_noteid() {
  if (has_noteid()) {
    id_.noteid_ = GOOGLE_ULONGLONG(0);
    clear_has_id();
  }
}
::google::protobuf::uint64 Note::noteid() const {
  // @@protoc_insertion_point(field_get:red.hooks.messages.Note.noteId)
  if (has_noteid()) {
    return id_.noteid_;
  }
  return GOOGLE_ULONGLONG(0);
}
void Note::set_noteid(::google::protobuf::uint64 value) {
  if (!has_noteid()) {
    clear_id();
    set_has_noteid();
  }
  id_.noteid_ = value;
  // @@protoc_insertion_point(field_set:red.hooks.messages.Note.noteId)
}

// optional string dbId = 3;
void Note::clear_dbid() {
  dbid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& Note::dbid() const {
  // @@protoc_insertion_point(field_get:red.hooks.messages.Note.dbId)
  return dbid_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Note::set_dbid(const ::std::string& value) {
  
  dbid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:red.hooks.messages.Note.dbId)
}
void Note::set_dbid(const char* value) {
  
  dbid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:red.hooks.messages.Note.dbId)
}
void Note::set_dbid(const char* value,
    size_t size) {
  
  dbid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:red.hooks.messages.Note.dbId)
}
::std::string* Note::mutable_dbid() {
  
  // @@protoc_insertion_point(field_mutable:red.hooks.messages.Note.dbId)
  return dbid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Note::release_dbid() {
  // @@protoc_insertion_point(field_release:red.hooks.messages.Note.dbId)
  
  return dbid_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Note::unsafe_arena_release_dbid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:red.hooks.messages.Note.dbId)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return dbid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Note::set_allocated_dbid(::std::string* dbid) {
  if (dbid != NULL) {
    
  } else {
    
  }
  dbid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dbid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:red.hooks.messages.Note.dbId)
}
void Note::unsafe_arena_set_allocated_dbid(
    ::std::string* dbid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (dbid != NULL) {
    
  } else {
    
  }
  dbid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      dbid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:red.hooks.messages.Note.dbId)
}

// repeated .red.hooks.messages.Item items = 10;
int Note::items_size() const {
  return items_.size();
}
void Note::clear_items() {
  items_.Clear();
}
const ::red::hooks::messages::Item& Note::items(int index) const {
  // @@protoc_insertion_point(field_get:red.hooks.messages.Note.items)
  return items_.Get(index);
}
::red::hooks::messages::Item* Note::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:red.hooks.messages.Note.items)
  return items_.Mutable(index);
}
::red::hooks::messages::Item* Note::add_items() {
  // @@protoc_insertion_point(field_add:red.hooks.messages.Note.items)
  return items_.Add();
}
::google::protobuf::RepeatedPtrField< ::red::hooks::messages::Item >*
Note::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:red.hooks.messages.Note.items)
  return &items_;
}
const ::google::protobuf::RepeatedPtrField< ::red::hooks::messages::Item >&
Note::items() const {
  // @@protoc_insertion_point(field_list:red.hooks.messages.Note.items)
  return items_;
}

bool Note::has_id() const {
  return id_case() != ID_NOT_SET;
}
void Note::clear_has_id() {
  _oneof_case_[0] = ID_NOT_SET;
}
Note::IdCase Note::id_case() const {
  return Note::IdCase(_oneof_case_[0]);
}
inline const Note* Note::internal_default_instance() {
  return &Note_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Item::kTypeFieldNumber;
const int Item::kNameFieldNumber;
const int Item::kFlagsFieldNumber;
const int Item::kTvalueFieldNumber;
const int Item::kNvalueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Item::Item()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_notes_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:red.hooks.messages.Item)
}
Item::Item(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  tvalue_(arena),
  nvalue_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_notes_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:red.hooks.messages.Item)
}

void Item::InitAsDefaultInstance() {
}

Item::Item(const Item& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:red.hooks.messages.Item)
}

void Item::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&type_) + sizeof(flags_));
  _cached_size_ = 0;
}

Item::~Item() {
  // @@protoc_insertion_point(destructor:red.hooks.messages.Item)
  SharedDtor();
}

void Item::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void Item::ArenaDtor(void* object) {
  Item* _this = reinterpret_cast< Item* >(object);
  (void)_this;
}
void Item::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_descriptor_;
}

const Item& Item::default_instance() {
  protobuf_InitDefaults_notes_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Item> Item_default_instance_;

Item* Item::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Item>(arena);
}

void Item::Clear() {
// @@protoc_insertion_point(message_clear_start:red.hooks.messages.Item)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Item, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Item*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, flags_);
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());

#undef ZR_HELPER_
#undef ZR_

  tvalue_.Clear();
  nvalue_.Clear();
}

bool Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:red.hooks.messages.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tvalue;
        break;
      }

      // repeated string tvalue = 2;
      case 2: {
        if (tag == 18) {
         parse_tvalue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tvalue()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tvalue(this->tvalue_size() - 1).data(),
            this->tvalue(this->tvalue_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "red.hooks.messages.Item.tvalue"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tvalue;
        if (input->ExpectTag(26)) goto parse_nvalue;
        break;
      }

      // repeated uint64 nvalue = 3;
      case 3: {
        if (tag == 26) {
         parse_nvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_nvalue())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 26, input, this->mutable_nvalue())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "red.hooks.messages.Item.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_flags;
        break;
      }

      // optional uint32 flags = 5;
      case 5: {
        if (tag == 40) {
         parse_flags:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:red.hooks.messages.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:red.hooks.messages.Item)
  return false;
#undef DO_
}

void Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:red.hooks.messages.Item)
  // optional uint32 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // repeated string tvalue = 2;
  for (int i = 0; i < this->tvalue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tvalue(i).data(), this->tvalue(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "red.hooks.messages.Item.tvalue");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->tvalue(i), output);
  }

  // repeated uint64 nvalue = 3;
  if (this->nvalue_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_nvalue_cached_byte_size_);
  }
  for (int i = 0; i < this->nvalue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->nvalue(i), output);
  }

  // optional string name = 4;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "red.hooks.messages.Item.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // optional uint32 flags = 5;
  if (this->flags() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->flags(), output);
  }

  // @@protoc_insertion_point(serialize_end:red.hooks.messages.Item)
}

::google::protobuf::uint8* Item::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:red.hooks.messages.Item)
  // optional uint32 type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // repeated string tvalue = 2;
  for (int i = 0; i < this->tvalue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tvalue(i).data(), this->tvalue(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "red.hooks.messages.Item.tvalue");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->tvalue(i), target);
  }

  // repeated uint64 nvalue = 3;
  if (this->nvalue_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _nvalue_cached_byte_size_, target);
  }
  for (int i = 0; i < this->nvalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->nvalue(i), target);
  }

  // optional string name = 4;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "red.hooks.messages.Item.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional uint32 flags = 5;
  if (this->flags() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->flags(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:red.hooks.messages.Item)
  return target;
}

size_t Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:red.hooks.messages.Item)
  size_t total_size = 0;

  // optional uint32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  // optional string name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional uint32 flags = 5;
  if (this->flags() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flags());
  }

  // repeated string tvalue = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->tvalue_size());
  for (int i = 0; i < this->tvalue_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tvalue(i));
  }

  // repeated uint64 nvalue = 3;
  {
    size_t data_size = 0;
    unsigned int count = this->nvalue_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->nvalue(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _nvalue_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:red.hooks.messages.Item)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Item* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Item>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:red.hooks.messages.Item)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:red.hooks.messages.Item)
    UnsafeMergeFrom(*source);
  }
}

void Item::MergeFrom(const Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:red.hooks.messages.Item)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Item::UnsafeMergeFrom(const Item& from) {
  GOOGLE_DCHECK(&from != this);
  tvalue_.UnsafeMergeFrom(from.tvalue_);
  nvalue_.UnsafeMergeFrom(from.nvalue_);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.flags() != 0) {
    set_flags(from.flags());
  }
}

void Item::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:red.hooks.messages.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item::CopyFrom(const Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:red.hooks.messages.Item)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Item::IsInitialized() const {

  return true;
}

void Item::Swap(Item* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Item temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void Item::UnsafeArenaSwap(Item* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Item::InternalSwap(Item* other) {
  std::swap(type_, other->type_);
  name_.Swap(&other->name_);
  std::swap(flags_, other->flags_);
  tvalue_.UnsafeArenaSwap(&other->tvalue_);
  nvalue_.UnsafeArenaSwap(&other->nvalue_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_descriptor_;
  metadata.reflection = Item_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Item

// optional uint32 type = 1;
void Item::clear_type() {
  type_ = 0u;
}
::google::protobuf::uint32 Item::type() const {
  // @@protoc_insertion_point(field_get:red.hooks.messages.Item.type)
  return type_;
}
void Item::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:red.hooks.messages.Item.type)
}

// optional string name = 4;
void Item::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& Item::name() const {
  // @@protoc_insertion_point(field_get:red.hooks.messages.Item.name)
  return name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Item::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:red.hooks.messages.Item.name)
}
void Item::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:red.hooks.messages.Item.name)
}
void Item::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:red.hooks.messages.Item.name)
}
::std::string* Item::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:red.hooks.messages.Item.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Item::release_name() {
  // @@protoc_insertion_point(field_release:red.hooks.messages.Item.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Item::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:red.hooks.messages.Item.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Item::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:red.hooks.messages.Item.name)
}
void Item::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:red.hooks.messages.Item.name)
}

// optional uint32 flags = 5;
void Item::clear_flags() {
  flags_ = 0u;
}
::google::protobuf::uint32 Item::flags() const {
  // @@protoc_insertion_point(field_get:red.hooks.messages.Item.flags)
  return flags_;
}
void Item::set_flags(::google::protobuf::uint32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:red.hooks.messages.Item.flags)
}

// repeated string tvalue = 2;
int Item::tvalue_size() const {
  return tvalue_.size();
}
void Item::clear_tvalue() {
  tvalue_.Clear();
}
const ::std::string& Item::tvalue(int index) const {
  // @@protoc_insertion_point(field_get:red.hooks.messages.Item.tvalue)
  return tvalue_.Get(index);
}
::std::string* Item::mutable_tvalue(int index) {
  // @@protoc_insertion_point(field_mutable:red.hooks.messages.Item.tvalue)
  return tvalue_.Mutable(index);
}
void Item::set_tvalue(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:red.hooks.messages.Item.tvalue)
  tvalue_.Mutable(index)->assign(value);
}
void Item::set_tvalue(int index, const char* value) {
  tvalue_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:red.hooks.messages.Item.tvalue)
}
void Item::set_tvalue(int index, const char* value, size_t size) {
  tvalue_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:red.hooks.messages.Item.tvalue)
}
::std::string* Item::add_tvalue() {
  // @@protoc_insertion_point(field_add_mutable:red.hooks.messages.Item.tvalue)
  return tvalue_.Add();
}
void Item::add_tvalue(const ::std::string& value) {
  tvalue_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:red.hooks.messages.Item.tvalue)
}
void Item::add_tvalue(const char* value) {
  tvalue_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:red.hooks.messages.Item.tvalue)
}
void Item::add_tvalue(const char* value, size_t size) {
  tvalue_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:red.hooks.messages.Item.tvalue)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Item::tvalue() const {
  // @@protoc_insertion_point(field_list:red.hooks.messages.Item.tvalue)
  return tvalue_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Item::mutable_tvalue() {
  // @@protoc_insertion_point(field_mutable_list:red.hooks.messages.Item.tvalue)
  return &tvalue_;
}

// repeated uint64 nvalue = 3;
int Item::nvalue_size() const {
  return nvalue_.size();
}
void Item::clear_nvalue() {
  nvalue_.Clear();
}
::google::protobuf::uint64 Item::nvalue(int index) const {
  // @@protoc_insertion_point(field_get:red.hooks.messages.Item.nvalue)
  return nvalue_.Get(index);
}
void Item::set_nvalue(int index, ::google::protobuf::uint64 value) {
  nvalue_.Set(index, value);
  // @@protoc_insertion_point(field_set:red.hooks.messages.Item.nvalue)
}
void Item::add_nvalue(::google::protobuf::uint64 value) {
  nvalue_.Add(value);
  // @@protoc_insertion_point(field_add:red.hooks.messages.Item.nvalue)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Item::nvalue() const {
  // @@protoc_insertion_point(field_list:red.hooks.messages.Item.nvalue)
  return nvalue_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Item::mutable_nvalue() {
  // @@protoc_insertion_point(field_mutable_list:red.hooks.messages.Item.nvalue)
  return &nvalue_;
}

inline const Item* Item::internal_default_instance() {
  return &Item_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NoteCollection::NoteCollection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_notes_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:red.hooks.messages.NoteCollection)
}
NoteCollection::NoteCollection(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_notes_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:red.hooks.messages.NoteCollection)
}

void NoteCollection::InitAsDefaultInstance() {
}

NoteCollection::NoteCollection(const NoteCollection& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:red.hooks.messages.NoteCollection)
}

void NoteCollection::SharedCtor() {
  _cached_size_ = 0;
}

NoteCollection::~NoteCollection() {
  // @@protoc_insertion_point(destructor:red.hooks.messages.NoteCollection)
  SharedDtor();
}

void NoteCollection::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void NoteCollection::ArenaDtor(void* object) {
  NoteCollection* _this = reinterpret_cast< NoteCollection* >(object);
  (void)_this;
}
void NoteCollection::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void NoteCollection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NoteCollection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NoteCollection_descriptor_;
}

const NoteCollection& NoteCollection::default_instance() {
  protobuf_InitDefaults_notes_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<NoteCollection> NoteCollection_default_instance_;

NoteCollection* NoteCollection::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<NoteCollection>(arena);
}

void NoteCollection::Clear() {
// @@protoc_insertion_point(message_clear_start:red.hooks.messages.NoteCollection)
}

bool NoteCollection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:red.hooks.messages.NoteCollection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:red.hooks.messages.NoteCollection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:red.hooks.messages.NoteCollection)
  return false;
#undef DO_
}

void NoteCollection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:red.hooks.messages.NoteCollection)
  // @@protoc_insertion_point(serialize_end:red.hooks.messages.NoteCollection)
}

::google::protobuf::uint8* NoteCollection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:red.hooks.messages.NoteCollection)
  // @@protoc_insertion_point(serialize_to_array_end:red.hooks.messages.NoteCollection)
  return target;
}

size_t NoteCollection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:red.hooks.messages.NoteCollection)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NoteCollection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:red.hooks.messages.NoteCollection)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NoteCollection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NoteCollection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:red.hooks.messages.NoteCollection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:red.hooks.messages.NoteCollection)
    UnsafeMergeFrom(*source);
  }
}

void NoteCollection::MergeFrom(const NoteCollection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:red.hooks.messages.NoteCollection)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void NoteCollection::UnsafeMergeFrom(const NoteCollection& from) {
  GOOGLE_DCHECK(&from != this);
}

void NoteCollection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:red.hooks.messages.NoteCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NoteCollection::CopyFrom(const NoteCollection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:red.hooks.messages.NoteCollection)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool NoteCollection::IsInitialized() const {

  return true;
}

void NoteCollection::Swap(NoteCollection* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    NoteCollection temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void NoteCollection::UnsafeArenaSwap(NoteCollection* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void NoteCollection::InternalSwap(NoteCollection* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NoteCollection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NoteCollection_descriptor_;
  metadata.reflection = NoteCollection_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NoteCollection

inline const NoteCollection* NoteCollection::internal_default_instance() {
  return &NoteCollection_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestNoteInfo::kUnidFieldNumber;
const int RequestNoteInfo::kNoteIdFieldNumber;
const int RequestNoteInfo::kDbIdFieldNumber;
const int RequestNoteInfo::kActionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestNoteInfo::RequestNoteInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_notes_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:red.hooks.messages.RequestNoteInfo)
}
RequestNoteInfo::RequestNoteInfo(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_notes_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:red.hooks.messages.RequestNoteInfo)
}

void RequestNoteInfo::InitAsDefaultInstance() {
  RequestNoteInfo_default_oneof_instance_->unid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  RequestNoteInfo_default_oneof_instance_->noteid_ = GOOGLE_ULONGLONG(0);
}

RequestNoteInfo::RequestNoteInfo(const RequestNoteInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:red.hooks.messages.RequestNoteInfo)
}

void RequestNoteInfo::SharedCtor() {
  dbid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  action_ = 0;
  clear_has_id();
  _cached_size_ = 0;
}

RequestNoteInfo::~RequestNoteInfo() {
  // @@protoc_insertion_point(destructor:red.hooks.messages.RequestNoteInfo)
  SharedDtor();
}

void RequestNoteInfo::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  dbid_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (has_id()) {
    clear_id();
  }
}

void RequestNoteInfo::ArenaDtor(void* object) {
  RequestNoteInfo* _this = reinterpret_cast< RequestNoteInfo* >(object);
  (void)_this;
}
void RequestNoteInfo::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RequestNoteInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestNoteInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestNoteInfo_descriptor_;
}

const RequestNoteInfo& RequestNoteInfo::default_instance() {
  protobuf_InitDefaults_notes_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RequestNoteInfo> RequestNoteInfo_default_instance_;

RequestNoteInfo* RequestNoteInfo::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<RequestNoteInfo>(arena);
}

void RequestNoteInfo::clear_id() {
// @@protoc_insertion_point(one_of_clear_start:red.hooks.messages.RequestNoteInfo)
  switch (id_case()) {
    case kUnid: {
      id_.unid_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
          GetArenaNoVirtual());
      break;
    }
    case kNoteId: {
      // No need to clear
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ID_NOT_SET;
}


void RequestNoteInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:red.hooks.messages.RequestNoteInfo)
  dbid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  action_ = 0;
  clear_id();
}

bool RequestNoteInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:red.hooks.messages.RequestNoteInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string unid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->unid().data(), this->unid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "red.hooks.messages.RequestNoteInfo.unid"));
        } else {
          goto handle_unusual;
        }
        goto after_noteid;
        break;
      }

      // optional uint64 noteId = 2;
      case 2: {
        if (tag == 16) {
          clear_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_.noteid_)));
          set_has_noteid();
        } else {
          goto handle_unusual;
        }
       after_noteid:
        if (input->ExpectTag(26)) goto parse_dbId;
        break;
      }

      // optional string dbId = 3;
      case 3: {
        if (tag == 26) {
         parse_dbId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dbid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dbid().data(), this->dbid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "red.hooks.messages.RequestNoteInfo.dbId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_action;
        break;
      }

      // optional .red.hooks.messages.Action action = 4;
      case 4: {
        if (tag == 32) {
         parse_action:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_action(static_cast< ::red::hooks::messages::Action >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:red.hooks.messages.RequestNoteInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:red.hooks.messages.RequestNoteInfo)
  return false;
#undef DO_
}

void RequestNoteInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:red.hooks.messages.RequestNoteInfo)
  // optional string unid = 1;
  if (has_unid()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->unid().data(), this->unid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "red.hooks.messages.RequestNoteInfo.unid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->unid(), output);
  }

  // optional uint64 noteId = 2;
  if (has_noteid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->noteid(), output);
  }

  // optional string dbId = 3;
  if (this->dbid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dbid().data(), this->dbid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "red.hooks.messages.RequestNoteInfo.dbId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->dbid(), output);
  }

  // optional .red.hooks.messages.Action action = 4;
  if (this->action() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->action(), output);
  }

  // @@protoc_insertion_point(serialize_end:red.hooks.messages.RequestNoteInfo)
}

::google::protobuf::uint8* RequestNoteInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:red.hooks.messages.RequestNoteInfo)
  // optional string unid = 1;
  if (has_unid()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->unid().data(), this->unid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "red.hooks.messages.RequestNoteInfo.unid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->unid(), target);
  }

  // optional uint64 noteId = 2;
  if (has_noteid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->noteid(), target);
  }

  // optional string dbId = 3;
  if (this->dbid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dbid().data(), this->dbid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "red.hooks.messages.RequestNoteInfo.dbId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->dbid(), target);
  }

  // optional .red.hooks.messages.Action action = 4;
  if (this->action() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->action(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:red.hooks.messages.RequestNoteInfo)
  return target;
}

size_t RequestNoteInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:red.hooks.messages.RequestNoteInfo)
  size_t total_size = 0;

  // optional string dbId = 3;
  if (this->dbid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dbid());
  }

  // optional .red.hooks.messages.Action action = 4;
  if (this->action() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
  }

  switch (id_case()) {
    // optional string unid = 1;
    case kUnid: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unid());
      break;
    }
    // optional uint64 noteId = 2;
    case kNoteId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->noteid());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestNoteInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:red.hooks.messages.RequestNoteInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RequestNoteInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestNoteInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:red.hooks.messages.RequestNoteInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:red.hooks.messages.RequestNoteInfo)
    UnsafeMergeFrom(*source);
  }
}

void RequestNoteInfo::MergeFrom(const RequestNoteInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:red.hooks.messages.RequestNoteInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RequestNoteInfo::UnsafeMergeFrom(const RequestNoteInfo& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.id_case()) {
    case kUnid: {
      set_unid(from.unid());
      break;
    }
    case kNoteId: {
      set_noteid(from.noteid());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  if (from.dbid().size() > 0) {
    set_dbid(from.dbid());
  }
  if (from.action() != 0) {
    set_action(from.action());
  }
}

void RequestNoteInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:red.hooks.messages.RequestNoteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestNoteInfo::CopyFrom(const RequestNoteInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:red.hooks.messages.RequestNoteInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RequestNoteInfo::IsInitialized() const {

  return true;
}

void RequestNoteInfo::Swap(RequestNoteInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RequestNoteInfo temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void RequestNoteInfo::UnsafeArenaSwap(RequestNoteInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RequestNoteInfo::InternalSwap(RequestNoteInfo* other) {
  dbid_.Swap(&other->dbid_);
  std::swap(action_, other->action_);
  std::swap(id_, other->id_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestNoteInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestNoteInfo_descriptor_;
  metadata.reflection = RequestNoteInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestNoteInfo

// optional string unid = 1;
bool RequestNoteInfo::has_unid() const {
  return id_case() == kUnid;
}
void RequestNoteInfo::set_has_unid() {
  _oneof_case_[0] = kUnid;
}
void RequestNoteInfo::clear_unid() {
  if (has_unid()) {
    id_.unid_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
    clear_has_id();
  }
}
const ::std::string& RequestNoteInfo::unid() const {
  // @@protoc_insertion_point(field_get:red.hooks.messages.RequestNoteInfo.unid)
  if (has_unid()) {
    return id_.unid_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void RequestNoteInfo::set_unid(const ::std::string& value) {
  if (!has_unid()) {
    clear_id();
    set_has_unid();
    id_.unid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.unid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:red.hooks.messages.RequestNoteInfo.unid)
}
void RequestNoteInfo::set_unid(const char* value) {
  if (!has_unid()) {
    clear_id();
    set_has_unid();
    id_.unid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.unid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:red.hooks.messages.RequestNoteInfo.unid)
}
void RequestNoteInfo::set_unid(const char* value,
                             size_t size) {
  if (!has_unid()) {
    clear_id();
    set_has_unid();
    id_.unid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.unid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:red.hooks.messages.RequestNoteInfo.unid)
}
::std::string* RequestNoteInfo::mutable_unid() {
  if (!has_unid()) {
    clear_id();
    set_has_unid();
    id_.unid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return id_.unid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_mutable:red.hooks.messages.RequestNoteInfo.unid)
}
::std::string* RequestNoteInfo::release_unid() {
  // @@protoc_insertion_point(field_release:red.hooks.messages.RequestNoteInfo.unid)
  if (has_unid()) {
    clear_has_id();
    return id_.unid_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
::std::string* RequestNoteInfo::unsafe_arena_release_unid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:red.hooks.messages.RequestNoteInfo.unid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (has_unid()) {
    clear_has_id();
    return id_.unid_.UnsafeArenaRelease(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
void RequestNoteInfo::set_allocated_unid(::std::string* unid) {
  if (!has_unid()) {
    id_.unid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (unid != NULL) {
    set_has_unid();
    id_.unid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unid,
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_set_allocated:red.hooks.messages.RequestNoteInfo.unid)
}
void RequestNoteInfo::unsafe_arena_set_allocated_unid(::std::string* unid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (!has_unid()) {
    id_.unid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (unid) {
    set_has_unid();
    id_.unid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unid, GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:red.hooks.messages.RequestNoteInfo.unid)
}

// optional uint64 noteId = 2;
bool RequestNoteInfo::has_noteid() const {
  return id_case() == kNoteId;
}
void RequestNoteInfo::set_has_noteid() {
  _oneof_case_[0] = kNoteId;
}
void RequestNoteInfo::clear_noteid() {
  if (has_noteid()) {
    id_.noteid_ = GOOGLE_ULONGLONG(0);
    clear_has_id();
  }
}
::google::protobuf::uint64 RequestNoteInfo::noteid() const {
  // @@protoc_insertion_point(field_get:red.hooks.messages.RequestNoteInfo.noteId)
  if (has_noteid()) {
    return id_.noteid_;
  }
  return GOOGLE_ULONGLONG(0);
}
void RequestNoteInfo::set_noteid(::google::protobuf::uint64 value) {
  if (!has_noteid()) {
    clear_id();
    set_has_noteid();
  }
  id_.noteid_ = value;
  // @@protoc_insertion_point(field_set:red.hooks.messages.RequestNoteInfo.noteId)
}

// optional string dbId = 3;
void RequestNoteInfo::clear_dbid() {
  dbid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& RequestNoteInfo::dbid() const {
  // @@protoc_insertion_point(field_get:red.hooks.messages.RequestNoteInfo.dbId)
  return dbid_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RequestNoteInfo::set_dbid(const ::std::string& value) {
  
  dbid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:red.hooks.messages.RequestNoteInfo.dbId)
}
void RequestNoteInfo::set_dbid(const char* value) {
  
  dbid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:red.hooks.messages.RequestNoteInfo.dbId)
}
void RequestNoteInfo::set_dbid(const char* value,
    size_t size) {
  
  dbid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:red.hooks.messages.RequestNoteInfo.dbId)
}
::std::string* RequestNoteInfo::mutable_dbid() {
  
  // @@protoc_insertion_point(field_mutable:red.hooks.messages.RequestNoteInfo.dbId)
  return dbid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* RequestNoteInfo::release_dbid() {
  // @@protoc_insertion_point(field_release:red.hooks.messages.RequestNoteInfo.dbId)
  
  return dbid_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* RequestNoteInfo::unsafe_arena_release_dbid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:red.hooks.messages.RequestNoteInfo.dbId)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return dbid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void RequestNoteInfo::set_allocated_dbid(::std::string* dbid) {
  if (dbid != NULL) {
    
  } else {
    
  }
  dbid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dbid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:red.hooks.messages.RequestNoteInfo.dbId)
}
void RequestNoteInfo::unsafe_arena_set_allocated_dbid(
    ::std::string* dbid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (dbid != NULL) {
    
  } else {
    
  }
  dbid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      dbid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:red.hooks.messages.RequestNoteInfo.dbId)
}

// optional .red.hooks.messages.Action action = 4;
void RequestNoteInfo::clear_action() {
  action_ = 0;
}
::red::hooks::messages::Action RequestNoteInfo::action() const {
  // @@protoc_insertion_point(field_get:red.hooks.messages.RequestNoteInfo.action)
  return static_cast< ::red::hooks::messages::Action >(action_);
}
void RequestNoteInfo::set_action(::red::hooks::messages::Action value) {
  
  action_ = value;
  // @@protoc_insertion_point(field_set:red.hooks.messages.RequestNoteInfo.action)
}

bool RequestNoteInfo::has_id() const {
  return id_case() != ID_NOT_SET;
}
void RequestNoteInfo::clear_has_id() {
  _oneof_case_[0] = ID_NOT_SET;
}
RequestNoteInfo::IdCase RequestNoteInfo::id_case() const {
  return RequestNoteInfo::IdCase(_oneof_case_[0]);
}
inline const RequestNoteInfo* RequestNoteInfo::internal_default_instance() {
  return &RequestNoteInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestNote::kUnidFieldNumber;
const int RequestNote::kNoteIdFieldNumber;
const int RequestNote::kDbIdFieldNumber;
const int RequestNote::kActionFieldNumber;
const int RequestNote::kItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestNote::RequestNote()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_notes_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:red.hooks.messages.RequestNote)
}
RequestNote::RequestNote(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  items_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_notes_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:red.hooks.messages.RequestNote)
}

void RequestNote::InitAsDefaultInstance() {
  RequestNote_default_oneof_instance_->unid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  RequestNote_default_oneof_instance_->noteid_ = GOOGLE_ULONGLONG(0);
}

RequestNote::RequestNote(const RequestNote& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:red.hooks.messages.RequestNote)
}

void RequestNote::SharedCtor() {
  dbid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  action_ = 0;
  clear_has_id();
  _cached_size_ = 0;
}

RequestNote::~RequestNote() {
  // @@protoc_insertion_point(destructor:red.hooks.messages.RequestNote)
  SharedDtor();
}

void RequestNote::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  dbid_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (has_id()) {
    clear_id();
  }
}

void RequestNote::ArenaDtor(void* object) {
  RequestNote* _this = reinterpret_cast< RequestNote* >(object);
  (void)_this;
}
void RequestNote::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RequestNote::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestNote::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestNote_descriptor_;
}

const RequestNote& RequestNote::default_instance() {
  protobuf_InitDefaults_notes_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RequestNote> RequestNote_default_instance_;

RequestNote* RequestNote::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<RequestNote>(arena);
}

void RequestNote::clear_id() {
// @@protoc_insertion_point(one_of_clear_start:red.hooks.messages.RequestNote)
  switch (id_case()) {
    case kUnid: {
      id_.unid_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
          GetArenaNoVirtual());
      break;
    }
    case kNoteId: {
      // No need to clear
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ID_NOT_SET;
}


void RequestNote::Clear() {
// @@protoc_insertion_point(message_clear_start:red.hooks.messages.RequestNote)
  dbid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  action_ = 0;
  items_.Clear();
  clear_id();
}

bool RequestNote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:red.hooks.messages.RequestNote)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string unid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->unid().data(), this->unid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "red.hooks.messages.RequestNote.unid"));
        } else {
          goto handle_unusual;
        }
        goto after_noteid;
        break;
      }

      // optional uint64 noteId = 2;
      case 2: {
        if (tag == 16) {
          clear_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_.noteid_)));
          set_has_noteid();
        } else {
          goto handle_unusual;
        }
       after_noteid:
        if (input->ExpectTag(26)) goto parse_dbId;
        break;
      }

      // optional string dbId = 3;
      case 3: {
        if (tag == 26) {
         parse_dbId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dbid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dbid().data(), this->dbid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "red.hooks.messages.RequestNote.dbId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_action;
        break;
      }

      // optional .red.hooks.messages.Action action = 4;
      case 4: {
        if (tag == 32) {
         parse_action:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_action(static_cast< ::red::hooks::messages::Action >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_items;
        break;
      }

      // repeated .red.hooks.messages.Item items = 10;
      case 10: {
        if (tag == 82) {
         parse_items:
          DO_(input->IncrementRecursionDepth());
         parse_loop_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_loop_items;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:red.hooks.messages.RequestNote)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:red.hooks.messages.RequestNote)
  return false;
#undef DO_
}

void RequestNote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:red.hooks.messages.RequestNote)
  // optional string unid = 1;
  if (has_unid()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->unid().data(), this->unid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "red.hooks.messages.RequestNote.unid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->unid(), output);
  }

  // optional uint64 noteId = 2;
  if (has_noteid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->noteid(), output);
  }

  // optional string dbId = 3;
  if (this->dbid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dbid().data(), this->dbid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "red.hooks.messages.RequestNote.dbId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->dbid(), output);
  }

  // optional .red.hooks.messages.Action action = 4;
  if (this->action() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->action(), output);
  }

  // repeated .red.hooks.messages.Item items = 10;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->items(i), output);
  }

  // @@protoc_insertion_point(serialize_end:red.hooks.messages.RequestNote)
}

::google::protobuf::uint8* RequestNote::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:red.hooks.messages.RequestNote)
  // optional string unid = 1;
  if (has_unid()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->unid().data(), this->unid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "red.hooks.messages.RequestNote.unid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->unid(), target);
  }

  // optional uint64 noteId = 2;
  if (has_noteid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->noteid(), target);
  }

  // optional string dbId = 3;
  if (this->dbid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dbid().data(), this->dbid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "red.hooks.messages.RequestNote.dbId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->dbid(), target);
  }

  // optional .red.hooks.messages.Action action = 4;
  if (this->action() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->action(), target);
  }

  // repeated .red.hooks.messages.Item items = 10;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->items(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:red.hooks.messages.RequestNote)
  return target;
}

size_t RequestNote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:red.hooks.messages.RequestNote)
  size_t total_size = 0;

  // optional string dbId = 3;
  if (this->dbid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dbid());
  }

  // optional .red.hooks.messages.Action action = 4;
  if (this->action() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
  }

  // repeated .red.hooks.messages.Item items = 10;
  {
    unsigned int count = this->items_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->items(i));
    }
  }

  switch (id_case()) {
    // optional string unid = 1;
    case kUnid: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unid());
      break;
    }
    // optional uint64 noteId = 2;
    case kNoteId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->noteid());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestNote::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:red.hooks.messages.RequestNote)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RequestNote* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestNote>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:red.hooks.messages.RequestNote)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:red.hooks.messages.RequestNote)
    UnsafeMergeFrom(*source);
  }
}

void RequestNote::MergeFrom(const RequestNote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:red.hooks.messages.RequestNote)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RequestNote::UnsafeMergeFrom(const RequestNote& from) {
  GOOGLE_DCHECK(&from != this);
  items_.MergeFrom(from.items_);
  switch (from.id_case()) {
    case kUnid: {
      set_unid(from.unid());
      break;
    }
    case kNoteId: {
      set_noteid(from.noteid());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  if (from.dbid().size() > 0) {
    set_dbid(from.dbid());
  }
  if (from.action() != 0) {
    set_action(from.action());
  }
}

void RequestNote::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:red.hooks.messages.RequestNote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestNote::CopyFrom(const RequestNote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:red.hooks.messages.RequestNote)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RequestNote::IsInitialized() const {

  return true;
}

void RequestNote::Swap(RequestNote* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RequestNote temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void RequestNote::UnsafeArenaSwap(RequestNote* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RequestNote::InternalSwap(RequestNote* other) {
  dbid_.Swap(&other->dbid_);
  std::swap(action_, other->action_);
  items_.UnsafeArenaSwap(&other->items_);
  std::swap(id_, other->id_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestNote::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestNote_descriptor_;
  metadata.reflection = RequestNote_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestNote

// optional string unid = 1;
bool RequestNote::has_unid() const {
  return id_case() == kUnid;
}
void RequestNote::set_has_unid() {
  _oneof_case_[0] = kUnid;
}
void RequestNote::clear_unid() {
  if (has_unid()) {
    id_.unid_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
    clear_has_id();
  }
}
const ::std::string& RequestNote::unid() const {
  // @@protoc_insertion_point(field_get:red.hooks.messages.RequestNote.unid)
  if (has_unid()) {
    return id_.unid_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void RequestNote::set_unid(const ::std::string& value) {
  if (!has_unid()) {
    clear_id();
    set_has_unid();
    id_.unid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.unid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:red.hooks.messages.RequestNote.unid)
}
void RequestNote::set_unid(const char* value) {
  if (!has_unid()) {
    clear_id();
    set_has_unid();
    id_.unid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.unid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:red.hooks.messages.RequestNote.unid)
}
void RequestNote::set_unid(const char* value,
                             size_t size) {
  if (!has_unid()) {
    clear_id();
    set_has_unid();
    id_.unid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.unid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:red.hooks.messages.RequestNote.unid)
}
::std::string* RequestNote::mutable_unid() {
  if (!has_unid()) {
    clear_id();
    set_has_unid();
    id_.unid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return id_.unid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_mutable:red.hooks.messages.RequestNote.unid)
}
::std::string* RequestNote::release_unid() {
  // @@protoc_insertion_point(field_release:red.hooks.messages.RequestNote.unid)
  if (has_unid()) {
    clear_has_id();
    return id_.unid_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
::std::string* RequestNote::unsafe_arena_release_unid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:red.hooks.messages.RequestNote.unid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (has_unid()) {
    clear_has_id();
    return id_.unid_.UnsafeArenaRelease(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
void RequestNote::set_allocated_unid(::std::string* unid) {
  if (!has_unid()) {
    id_.unid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (unid != NULL) {
    set_has_unid();
    id_.unid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unid,
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_set_allocated:red.hooks.messages.RequestNote.unid)
}
void RequestNote::unsafe_arena_set_allocated_unid(::std::string* unid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (!has_unid()) {
    id_.unid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (unid) {
    set_has_unid();
    id_.unid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unid, GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:red.hooks.messages.RequestNote.unid)
}

// optional uint64 noteId = 2;
bool RequestNote::has_noteid() const {
  return id_case() == kNoteId;
}
void RequestNote::set_has_noteid() {
  _oneof_case_[0] = kNoteId;
}
void RequestNote::clear_noteid() {
  if (has_noteid()) {
    id_.noteid_ = GOOGLE_ULONGLONG(0);
    clear_has_id();
  }
}
::google::protobuf::uint64 RequestNote::noteid() const {
  // @@protoc_insertion_point(field_get:red.hooks.messages.RequestNote.noteId)
  if (has_noteid()) {
    return id_.noteid_;
  }
  return GOOGLE_ULONGLONG(0);
}
void RequestNote::set_noteid(::google::protobuf::uint64 value) {
  if (!has_noteid()) {
    clear_id();
    set_has_noteid();
  }
  id_.noteid_ = value;
  // @@protoc_insertion_point(field_set:red.hooks.messages.RequestNote.noteId)
}

// optional string dbId = 3;
void RequestNote::clear_dbid() {
  dbid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& RequestNote::dbid() const {
  // @@protoc_insertion_point(field_get:red.hooks.messages.RequestNote.dbId)
  return dbid_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RequestNote::set_dbid(const ::std::string& value) {
  
  dbid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:red.hooks.messages.RequestNote.dbId)
}
void RequestNote::set_dbid(const char* value) {
  
  dbid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:red.hooks.messages.RequestNote.dbId)
}
void RequestNote::set_dbid(const char* value,
    size_t size) {
  
  dbid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:red.hooks.messages.RequestNote.dbId)
}
::std::string* RequestNote::mutable_dbid() {
  
  // @@protoc_insertion_point(field_mutable:red.hooks.messages.RequestNote.dbId)
  return dbid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* RequestNote::release_dbid() {
  // @@protoc_insertion_point(field_release:red.hooks.messages.RequestNote.dbId)
  
  return dbid_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* RequestNote::unsafe_arena_release_dbid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:red.hooks.messages.RequestNote.dbId)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return dbid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void RequestNote::set_allocated_dbid(::std::string* dbid) {
  if (dbid != NULL) {
    
  } else {
    
  }
  dbid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dbid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:red.hooks.messages.RequestNote.dbId)
}
void RequestNote::unsafe_arena_set_allocated_dbid(
    ::std::string* dbid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (dbid != NULL) {
    
  } else {
    
  }
  dbid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      dbid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:red.hooks.messages.RequestNote.dbId)
}

// optional .red.hooks.messages.Action action = 4;
void RequestNote::clear_action() {
  action_ = 0;
}
::red::hooks::messages::Action RequestNote::action() const {
  // @@protoc_insertion_point(field_get:red.hooks.messages.RequestNote.action)
  return static_cast< ::red::hooks::messages::Action >(action_);
}
void RequestNote::set_action(::red::hooks::messages::Action value) {
  
  action_ = value;
  // @@protoc_insertion_point(field_set:red.hooks.messages.RequestNote.action)
}

// repeated .red.hooks.messages.Item items = 10;
int RequestNote::items_size() const {
  return items_.size();
}
void RequestNote::clear_items() {
  items_.Clear();
}
const ::red::hooks::messages::Item& RequestNote::items(int index) const {
  // @@protoc_insertion_point(field_get:red.hooks.messages.RequestNote.items)
  return items_.Get(index);
}
::red::hooks::messages::Item* RequestNote::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:red.hooks.messages.RequestNote.items)
  return items_.Mutable(index);
}
::red::hooks::messages::Item* RequestNote::add_items() {
  // @@protoc_insertion_point(field_add:red.hooks.messages.RequestNote.items)
  return items_.Add();
}
::google::protobuf::RepeatedPtrField< ::red::hooks::messages::Item >*
RequestNote::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:red.hooks.messages.RequestNote.items)
  return &items_;
}
const ::google::protobuf::RepeatedPtrField< ::red::hooks::messages::Item >&
RequestNote::items() const {
  // @@protoc_insertion_point(field_list:red.hooks.messages.RequestNote.items)
  return items_;
}

bool RequestNote::has_id() const {
  return id_case() != ID_NOT_SET;
}
void RequestNote::clear_has_id() {
  _oneof_case_[0] = ID_NOT_SET;
}
RequestNote::IdCase RequestNote::id_case() const {
  return RequestNote::IdCase(_oneof_case_[0]);
}
inline const RequestNote* RequestNote::internal_default_instance() {
  return &RequestNote_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestNoteCollection::RequestNoteCollection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_notes_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:red.hooks.messages.RequestNoteCollection)
}
RequestNoteCollection::RequestNoteCollection(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_notes_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:red.hooks.messages.RequestNoteCollection)
}

void RequestNoteCollection::InitAsDefaultInstance() {
}

RequestNoteCollection::RequestNoteCollection(const RequestNoteCollection& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:red.hooks.messages.RequestNoteCollection)
}

void RequestNoteCollection::SharedCtor() {
  _cached_size_ = 0;
}

RequestNoteCollection::~RequestNoteCollection() {
  // @@protoc_insertion_point(destructor:red.hooks.messages.RequestNoteCollection)
  SharedDtor();
}

void RequestNoteCollection::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void RequestNoteCollection::ArenaDtor(void* object) {
  RequestNoteCollection* _this = reinterpret_cast< RequestNoteCollection* >(object);
  (void)_this;
}
void RequestNoteCollection::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RequestNoteCollection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestNoteCollection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestNoteCollection_descriptor_;
}

const RequestNoteCollection& RequestNoteCollection::default_instance() {
  protobuf_InitDefaults_notes_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RequestNoteCollection> RequestNoteCollection_default_instance_;

RequestNoteCollection* RequestNoteCollection::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<RequestNoteCollection>(arena);
}

void RequestNoteCollection::Clear() {
// @@protoc_insertion_point(message_clear_start:red.hooks.messages.RequestNoteCollection)
}

bool RequestNoteCollection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:red.hooks.messages.RequestNoteCollection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:red.hooks.messages.RequestNoteCollection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:red.hooks.messages.RequestNoteCollection)
  return false;
#undef DO_
}

void RequestNoteCollection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:red.hooks.messages.RequestNoteCollection)
  // @@protoc_insertion_point(serialize_end:red.hooks.messages.RequestNoteCollection)
}

::google::protobuf::uint8* RequestNoteCollection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:red.hooks.messages.RequestNoteCollection)
  // @@protoc_insertion_point(serialize_to_array_end:red.hooks.messages.RequestNoteCollection)
  return target;
}

size_t RequestNoteCollection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:red.hooks.messages.RequestNoteCollection)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestNoteCollection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:red.hooks.messages.RequestNoteCollection)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RequestNoteCollection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestNoteCollection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:red.hooks.messages.RequestNoteCollection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:red.hooks.messages.RequestNoteCollection)
    UnsafeMergeFrom(*source);
  }
}

void RequestNoteCollection::MergeFrom(const RequestNoteCollection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:red.hooks.messages.RequestNoteCollection)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RequestNoteCollection::UnsafeMergeFrom(const RequestNoteCollection& from) {
  GOOGLE_DCHECK(&from != this);
}

void RequestNoteCollection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:red.hooks.messages.RequestNoteCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestNoteCollection::CopyFrom(const RequestNoteCollection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:red.hooks.messages.RequestNoteCollection)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RequestNoteCollection::IsInitialized() const {

  return true;
}

void RequestNoteCollection::Swap(RequestNoteCollection* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RequestNoteCollection temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void RequestNoteCollection::UnsafeArenaSwap(RequestNoteCollection* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RequestNoteCollection::InternalSwap(RequestNoteCollection* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestNoteCollection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestNoteCollection_descriptor_;
  metadata.reflection = RequestNoteCollection_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestNoteCollection

inline const RequestNoteCollection* RequestNoteCollection::internal_default_instance() {
  return &RequestNoteCollection_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace hooks
}  // namespace red

// @@protoc_insertion_point(global_scope)
