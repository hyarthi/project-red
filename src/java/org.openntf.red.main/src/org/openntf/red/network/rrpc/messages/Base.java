// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base.proto

package org.openntf.red.network.rrpc.messages;

public final class Base {
  private Base() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface ResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:red.hooks.messages.Response)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional uint32 status = 1;</code>
     */
    int getStatus();

    /**
     * <code>optional .red.hooks.messages.NoteInfo noteInfo = 2;</code>
     */
    org.openntf.red.network.rrpc.messages.Notes.NoteInfo getNoteInfo();
    /**
     * <code>optional .red.hooks.messages.NoteInfo noteInfo = 2;</code>
     */
    org.openntf.red.network.rrpc.messages.Notes.NoteInfoOrBuilder getNoteInfoOrBuilder();

    /**
     * <code>optional .red.hooks.messages.Note note = 3;</code>
     */
    org.openntf.red.network.rrpc.messages.Notes.Note getNote();
    /**
     * <code>optional .red.hooks.messages.Note note = 3;</code>
     */
    org.openntf.red.network.rrpc.messages.Notes.NoteOrBuilder getNoteOrBuilder();

    /**
     * <code>optional .red.hooks.messages.NoteCollection ncollection = 4;</code>
     */
    org.openntf.red.network.rrpc.messages.Notes.NoteCollection getNcollection();
    /**
     * <code>optional .red.hooks.messages.NoteCollection ncollection = 4;</code>
     */
    org.openntf.red.network.rrpc.messages.Notes.NoteCollectionOrBuilder getNcollectionOrBuilder();

    public org.openntf.red.network.rrpc.messages.Base.Response.PayloadCase getPayloadCase();
  }
  /**
   * Protobuf type {@code red.hooks.messages.Response}
   */
  public  static final class Response extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:red.hooks.messages.Response)
      ResponseOrBuilder {
    // Use Response.newBuilder() to construct.
    private Response(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Response() {
      status_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private Response(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 8: {

              status_ = input.readUInt32();
              break;
            }
            case 18: {
              org.openntf.red.network.rrpc.messages.Notes.NoteInfo.Builder subBuilder = null;
              if (payloadCase_ == 2) {
                subBuilder = ((org.openntf.red.network.rrpc.messages.Notes.NoteInfo) payload_).toBuilder();
              }
              payload_ =
                  input.readMessage(org.openntf.red.network.rrpc.messages.Notes.NoteInfo.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.openntf.red.network.rrpc.messages.Notes.NoteInfo) payload_);
                payload_ = subBuilder.buildPartial();
              }
              payloadCase_ = 2;
              break;
            }
            case 26: {
              org.openntf.red.network.rrpc.messages.Notes.Note.Builder subBuilder = null;
              if (payloadCase_ == 3) {
                subBuilder = ((org.openntf.red.network.rrpc.messages.Notes.Note) payload_).toBuilder();
              }
              payload_ =
                  input.readMessage(org.openntf.red.network.rrpc.messages.Notes.Note.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.openntf.red.network.rrpc.messages.Notes.Note) payload_);
                payload_ = subBuilder.buildPartial();
              }
              payloadCase_ = 3;
              break;
            }
            case 34: {
              org.openntf.red.network.rrpc.messages.Notes.NoteCollection.Builder subBuilder = null;
              if (payloadCase_ == 4) {
                subBuilder = ((org.openntf.red.network.rrpc.messages.Notes.NoteCollection) payload_).toBuilder();
              }
              payload_ =
                  input.readMessage(org.openntf.red.network.rrpc.messages.Notes.NoteCollection.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.openntf.red.network.rrpc.messages.Notes.NoteCollection) payload_);
                payload_ = subBuilder.buildPartial();
              }
              payloadCase_ = 4;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.openntf.red.network.rrpc.messages.Base.internal_static_red_hooks_messages_Response_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.openntf.red.network.rrpc.messages.Base.internal_static_red_hooks_messages_Response_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.openntf.red.network.rrpc.messages.Base.Response.class, org.openntf.red.network.rrpc.messages.Base.Response.Builder.class);
    }

    private int payloadCase_ = 0;
    private java.lang.Object payload_;
    public enum PayloadCase
        implements com.google.protobuf.Internal.EnumLite {
      NOTEINFO(2),
      NOTE(3),
      NCOLLECTION(4),
      PAYLOAD_NOT_SET(0);
      private final int value;
      private PayloadCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static PayloadCase valueOf(int value) {
        return forNumber(value);
      }

      public static PayloadCase forNumber(int value) {
        switch (value) {
          case 2: return NOTEINFO;
          case 3: return NOTE;
          case 4: return NCOLLECTION;
          case 0: return PAYLOAD_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public PayloadCase
    getPayloadCase() {
      return PayloadCase.forNumber(
          payloadCase_);
    }

    public static final int STATUS_FIELD_NUMBER = 1;
    private int status_;
    /**
     * <code>optional uint32 status = 1;</code>
     */
    public int getStatus() {
      return status_;
    }

    public static final int NOTEINFO_FIELD_NUMBER = 2;
    /**
     * <code>optional .red.hooks.messages.NoteInfo noteInfo = 2;</code>
     */
    public org.openntf.red.network.rrpc.messages.Notes.NoteInfo getNoteInfo() {
      if (payloadCase_ == 2) {
         return (org.openntf.red.network.rrpc.messages.Notes.NoteInfo) payload_;
      }
      return org.openntf.red.network.rrpc.messages.Notes.NoteInfo.getDefaultInstance();
    }
    /**
     * <code>optional .red.hooks.messages.NoteInfo noteInfo = 2;</code>
     */
    public org.openntf.red.network.rrpc.messages.Notes.NoteInfoOrBuilder getNoteInfoOrBuilder() {
      if (payloadCase_ == 2) {
         return (org.openntf.red.network.rrpc.messages.Notes.NoteInfo) payload_;
      }
      return org.openntf.red.network.rrpc.messages.Notes.NoteInfo.getDefaultInstance();
    }

    public static final int NOTE_FIELD_NUMBER = 3;
    /**
     * <code>optional .red.hooks.messages.Note note = 3;</code>
     */
    public org.openntf.red.network.rrpc.messages.Notes.Note getNote() {
      if (payloadCase_ == 3) {
         return (org.openntf.red.network.rrpc.messages.Notes.Note) payload_;
      }
      return org.openntf.red.network.rrpc.messages.Notes.Note.getDefaultInstance();
    }
    /**
     * <code>optional .red.hooks.messages.Note note = 3;</code>
     */
    public org.openntf.red.network.rrpc.messages.Notes.NoteOrBuilder getNoteOrBuilder() {
      if (payloadCase_ == 3) {
         return (org.openntf.red.network.rrpc.messages.Notes.Note) payload_;
      }
      return org.openntf.red.network.rrpc.messages.Notes.Note.getDefaultInstance();
    }

    public static final int NCOLLECTION_FIELD_NUMBER = 4;
    /**
     * <code>optional .red.hooks.messages.NoteCollection ncollection = 4;</code>
     */
    public org.openntf.red.network.rrpc.messages.Notes.NoteCollection getNcollection() {
      if (payloadCase_ == 4) {
         return (org.openntf.red.network.rrpc.messages.Notes.NoteCollection) payload_;
      }
      return org.openntf.red.network.rrpc.messages.Notes.NoteCollection.getDefaultInstance();
    }
    /**
     * <code>optional .red.hooks.messages.NoteCollection ncollection = 4;</code>
     */
    public org.openntf.red.network.rrpc.messages.Notes.NoteCollectionOrBuilder getNcollectionOrBuilder() {
      if (payloadCase_ == 4) {
         return (org.openntf.red.network.rrpc.messages.Notes.NoteCollection) payload_;
      }
      return org.openntf.red.network.rrpc.messages.Notes.NoteCollection.getDefaultInstance();
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (status_ != 0) {
        output.writeUInt32(1, status_);
      }
      if (payloadCase_ == 2) {
        output.writeMessage(2, (org.openntf.red.network.rrpc.messages.Notes.NoteInfo) payload_);
      }
      if (payloadCase_ == 3) {
        output.writeMessage(3, (org.openntf.red.network.rrpc.messages.Notes.Note) payload_);
      }
      if (payloadCase_ == 4) {
        output.writeMessage(4, (org.openntf.red.network.rrpc.messages.Notes.NoteCollection) payload_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (status_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, status_);
      }
      if (payloadCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, (org.openntf.red.network.rrpc.messages.Notes.NoteInfo) payload_);
      }
      if (payloadCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, (org.openntf.red.network.rrpc.messages.Notes.Note) payload_);
      }
      if (payloadCase_ == 4) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, (org.openntf.red.network.rrpc.messages.Notes.NoteCollection) payload_);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.openntf.red.network.rrpc.messages.Base.Response)) {
        return super.equals(obj);
      }
      org.openntf.red.network.rrpc.messages.Base.Response other = (org.openntf.red.network.rrpc.messages.Base.Response) obj;

      boolean result = true;
      result = result && (getStatus()
          == other.getStatus());
      result = result && getPayloadCase().equals(
          other.getPayloadCase());
      if (!result) return false;
      switch (payloadCase_) {
        case 2:
          result = result && getNoteInfo()
              .equals(other.getNoteInfo());
          break;
        case 3:
          result = result && getNote()
              .equals(other.getNote());
          break;
        case 4:
          result = result && getNcollection()
              .equals(other.getNcollection());
          break;
        case 0:
        default:
      }
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      hash = (37 * hash) + STATUS_FIELD_NUMBER;
      hash = (53 * hash) + getStatus();
      switch (payloadCase_) {
        case 2:
          hash = (37 * hash) + NOTEINFO_FIELD_NUMBER;
          hash = (53 * hash) + getNoteInfo().hashCode();
          break;
        case 3:
          hash = (37 * hash) + NOTE_FIELD_NUMBER;
          hash = (53 * hash) + getNote().hashCode();
          break;
        case 4:
          hash = (37 * hash) + NCOLLECTION_FIELD_NUMBER;
          hash = (53 * hash) + getNcollection().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.openntf.red.network.rrpc.messages.Base.Response parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.openntf.red.network.rrpc.messages.Base.Response parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.openntf.red.network.rrpc.messages.Base.Response parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.openntf.red.network.rrpc.messages.Base.Response parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.openntf.red.network.rrpc.messages.Base.Response parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.openntf.red.network.rrpc.messages.Base.Response parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.openntf.red.network.rrpc.messages.Base.Response parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.openntf.red.network.rrpc.messages.Base.Response parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.openntf.red.network.rrpc.messages.Base.Response parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.openntf.red.network.rrpc.messages.Base.Response parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.openntf.red.network.rrpc.messages.Base.Response prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code red.hooks.messages.Response}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:red.hooks.messages.Response)
        org.openntf.red.network.rrpc.messages.Base.ResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.openntf.red.network.rrpc.messages.Base.internal_static_red_hooks_messages_Response_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.openntf.red.network.rrpc.messages.Base.internal_static_red_hooks_messages_Response_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.openntf.red.network.rrpc.messages.Base.Response.class, org.openntf.red.network.rrpc.messages.Base.Response.Builder.class);
      }

      // Construct using org.openntf.red.network.messages.Base.Response.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        status_ = 0;

        payloadCase_ = 0;
        payload_ = null;
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.openntf.red.network.rrpc.messages.Base.internal_static_red_hooks_messages_Response_descriptor;
      }

      public org.openntf.red.network.rrpc.messages.Base.Response getDefaultInstanceForType() {
        return org.openntf.red.network.rrpc.messages.Base.Response.getDefaultInstance();
      }

      public org.openntf.red.network.rrpc.messages.Base.Response build() {
        org.openntf.red.network.rrpc.messages.Base.Response result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.openntf.red.network.rrpc.messages.Base.Response buildPartial() {
        org.openntf.red.network.rrpc.messages.Base.Response result = new org.openntf.red.network.rrpc.messages.Base.Response(this);
        result.status_ = status_;
        if (payloadCase_ == 2) {
          if (noteInfoBuilder_ == null) {
            result.payload_ = payload_;
          } else {
            result.payload_ = noteInfoBuilder_.build();
          }
        }
        if (payloadCase_ == 3) {
          if (noteBuilder_ == null) {
            result.payload_ = payload_;
          } else {
            result.payload_ = noteBuilder_.build();
          }
        }
        if (payloadCase_ == 4) {
          if (ncollectionBuilder_ == null) {
            result.payload_ = payload_;
          } else {
            result.payload_ = ncollectionBuilder_.build();
          }
        }
        result.payloadCase_ = payloadCase_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.openntf.red.network.rrpc.messages.Base.Response) {
          return mergeFrom((org.openntf.red.network.rrpc.messages.Base.Response)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.openntf.red.network.rrpc.messages.Base.Response other) {
        if (other == org.openntf.red.network.rrpc.messages.Base.Response.getDefaultInstance()) return this;
        if (other.getStatus() != 0) {
          setStatus(other.getStatus());
        }
        switch (other.getPayloadCase()) {
          case NOTEINFO: {
            mergeNoteInfo(other.getNoteInfo());
            break;
          }
          case NOTE: {
            mergeNote(other.getNote());
            break;
          }
          case NCOLLECTION: {
            mergeNcollection(other.getNcollection());
            break;
          }
          case PAYLOAD_NOT_SET: {
            break;
          }
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.openntf.red.network.rrpc.messages.Base.Response parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.openntf.red.network.rrpc.messages.Base.Response) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int payloadCase_ = 0;
      private java.lang.Object payload_;
      public PayloadCase
          getPayloadCase() {
        return PayloadCase.forNumber(
            payloadCase_);
      }

      public Builder clearPayload() {
        payloadCase_ = 0;
        payload_ = null;
        onChanged();
        return this;
      }


      private int status_ ;
      /**
       * <code>optional uint32 status = 1;</code>
       */
      public int getStatus() {
        return status_;
      }
      /**
       * <code>optional uint32 status = 1;</code>
       */
      public Builder setStatus(int value) {
        
        status_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 status = 1;</code>
       */
      public Builder clearStatus() {
        
        status_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.openntf.red.network.rrpc.messages.Notes.NoteInfo, org.openntf.red.network.rrpc.messages.Notes.NoteInfo.Builder, org.openntf.red.network.rrpc.messages.Notes.NoteInfoOrBuilder> noteInfoBuilder_;
      /**
       * <code>optional .red.hooks.messages.NoteInfo noteInfo = 2;</code>
       */
      public org.openntf.red.network.rrpc.messages.Notes.NoteInfo getNoteInfo() {
        if (noteInfoBuilder_ == null) {
          if (payloadCase_ == 2) {
            return (org.openntf.red.network.rrpc.messages.Notes.NoteInfo) payload_;
          }
          return org.openntf.red.network.rrpc.messages.Notes.NoteInfo.getDefaultInstance();
        } else {
          if (payloadCase_ == 2) {
            return noteInfoBuilder_.getMessage();
          }
          return org.openntf.red.network.rrpc.messages.Notes.NoteInfo.getDefaultInstance();
        }
      }
      /**
       * <code>optional .red.hooks.messages.NoteInfo noteInfo = 2;</code>
       */
      public Builder setNoteInfo(org.openntf.red.network.rrpc.messages.Notes.NoteInfo value) {
        if (noteInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          payload_ = value;
          onChanged();
        } else {
          noteInfoBuilder_.setMessage(value);
        }
        payloadCase_ = 2;
        return this;
      }
      /**
       * <code>optional .red.hooks.messages.NoteInfo noteInfo = 2;</code>
       */
      public Builder setNoteInfo(
          org.openntf.red.network.rrpc.messages.Notes.NoteInfo.Builder builderForValue) {
        if (noteInfoBuilder_ == null) {
          payload_ = builderForValue.build();
          onChanged();
        } else {
          noteInfoBuilder_.setMessage(builderForValue.build());
        }
        payloadCase_ = 2;
        return this;
      }
      /**
       * <code>optional .red.hooks.messages.NoteInfo noteInfo = 2;</code>
       */
      public Builder mergeNoteInfo(org.openntf.red.network.rrpc.messages.Notes.NoteInfo value) {
        if (noteInfoBuilder_ == null) {
          if (payloadCase_ == 2 &&
              payload_ != org.openntf.red.network.rrpc.messages.Notes.NoteInfo.getDefaultInstance()) {
            payload_ = org.openntf.red.network.rrpc.messages.Notes.NoteInfo.newBuilder((org.openntf.red.network.rrpc.messages.Notes.NoteInfo) payload_)
                .mergeFrom(value).buildPartial();
          } else {
            payload_ = value;
          }
          onChanged();
        } else {
          if (payloadCase_ == 2) {
            noteInfoBuilder_.mergeFrom(value);
          }
          noteInfoBuilder_.setMessage(value);
        }
        payloadCase_ = 2;
        return this;
      }
      /**
       * <code>optional .red.hooks.messages.NoteInfo noteInfo = 2;</code>
       */
      public Builder clearNoteInfo() {
        if (noteInfoBuilder_ == null) {
          if (payloadCase_ == 2) {
            payloadCase_ = 0;
            payload_ = null;
            onChanged();
          }
        } else {
          if (payloadCase_ == 2) {
            payloadCase_ = 0;
            payload_ = null;
          }
          noteInfoBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .red.hooks.messages.NoteInfo noteInfo = 2;</code>
       */
      public org.openntf.red.network.rrpc.messages.Notes.NoteInfo.Builder getNoteInfoBuilder() {
        return getNoteInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .red.hooks.messages.NoteInfo noteInfo = 2;</code>
       */
      public org.openntf.red.network.rrpc.messages.Notes.NoteInfoOrBuilder getNoteInfoOrBuilder() {
        if ((payloadCase_ == 2) && (noteInfoBuilder_ != null)) {
          return noteInfoBuilder_.getMessageOrBuilder();
        } else {
          if (payloadCase_ == 2) {
            return (org.openntf.red.network.rrpc.messages.Notes.NoteInfo) payload_;
          }
          return org.openntf.red.network.rrpc.messages.Notes.NoteInfo.getDefaultInstance();
        }
      }
      /**
       * <code>optional .red.hooks.messages.NoteInfo noteInfo = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.openntf.red.network.rrpc.messages.Notes.NoteInfo, org.openntf.red.network.rrpc.messages.Notes.NoteInfo.Builder, org.openntf.red.network.rrpc.messages.Notes.NoteInfoOrBuilder> 
          getNoteInfoFieldBuilder() {
        if (noteInfoBuilder_ == null) {
          if (!(payloadCase_ == 2)) {
            payload_ = org.openntf.red.network.rrpc.messages.Notes.NoteInfo.getDefaultInstance();
          }
          noteInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.openntf.red.network.rrpc.messages.Notes.NoteInfo, org.openntf.red.network.rrpc.messages.Notes.NoteInfo.Builder, org.openntf.red.network.rrpc.messages.Notes.NoteInfoOrBuilder>(
                  (org.openntf.red.network.rrpc.messages.Notes.NoteInfo) payload_,
                  getParentForChildren(),
                  isClean());
          payload_ = null;
        }
        payloadCase_ = 2;
        onChanged();;
        return noteInfoBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.openntf.red.network.rrpc.messages.Notes.Note, org.openntf.red.network.rrpc.messages.Notes.Note.Builder, org.openntf.red.network.rrpc.messages.Notes.NoteOrBuilder> noteBuilder_;
      /**
       * <code>optional .red.hooks.messages.Note note = 3;</code>
       */
      public org.openntf.red.network.rrpc.messages.Notes.Note getNote() {
        if (noteBuilder_ == null) {
          if (payloadCase_ == 3) {
            return (org.openntf.red.network.rrpc.messages.Notes.Note) payload_;
          }
          return org.openntf.red.network.rrpc.messages.Notes.Note.getDefaultInstance();
        } else {
          if (payloadCase_ == 3) {
            return noteBuilder_.getMessage();
          }
          return org.openntf.red.network.rrpc.messages.Notes.Note.getDefaultInstance();
        }
      }
      /**
       * <code>optional .red.hooks.messages.Note note = 3;</code>
       */
      public Builder setNote(org.openntf.red.network.rrpc.messages.Notes.Note value) {
        if (noteBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          payload_ = value;
          onChanged();
        } else {
          noteBuilder_.setMessage(value);
        }
        payloadCase_ = 3;
        return this;
      }
      /**
       * <code>optional .red.hooks.messages.Note note = 3;</code>
       */
      public Builder setNote(
          org.openntf.red.network.rrpc.messages.Notes.Note.Builder builderForValue) {
        if (noteBuilder_ == null) {
          payload_ = builderForValue.build();
          onChanged();
        } else {
          noteBuilder_.setMessage(builderForValue.build());
        }
        payloadCase_ = 3;
        return this;
      }
      /**
       * <code>optional .red.hooks.messages.Note note = 3;</code>
       */
      public Builder mergeNote(org.openntf.red.network.rrpc.messages.Notes.Note value) {
        if (noteBuilder_ == null) {
          if (payloadCase_ == 3 &&
              payload_ != org.openntf.red.network.rrpc.messages.Notes.Note.getDefaultInstance()) {
            payload_ = org.openntf.red.network.rrpc.messages.Notes.Note.newBuilder((org.openntf.red.network.rrpc.messages.Notes.Note) payload_)
                .mergeFrom(value).buildPartial();
          } else {
            payload_ = value;
          }
          onChanged();
        } else {
          if (payloadCase_ == 3) {
            noteBuilder_.mergeFrom(value);
          }
          noteBuilder_.setMessage(value);
        }
        payloadCase_ = 3;
        return this;
      }
      /**
       * <code>optional .red.hooks.messages.Note note = 3;</code>
       */
      public Builder clearNote() {
        if (noteBuilder_ == null) {
          if (payloadCase_ == 3) {
            payloadCase_ = 0;
            payload_ = null;
            onChanged();
          }
        } else {
          if (payloadCase_ == 3) {
            payloadCase_ = 0;
            payload_ = null;
          }
          noteBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .red.hooks.messages.Note note = 3;</code>
       */
      public org.openntf.red.network.rrpc.messages.Notes.Note.Builder getNoteBuilder() {
        return getNoteFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .red.hooks.messages.Note note = 3;</code>
       */
      public org.openntf.red.network.rrpc.messages.Notes.NoteOrBuilder getNoteOrBuilder() {
        if ((payloadCase_ == 3) && (noteBuilder_ != null)) {
          return noteBuilder_.getMessageOrBuilder();
        } else {
          if (payloadCase_ == 3) {
            return (org.openntf.red.network.rrpc.messages.Notes.Note) payload_;
          }
          return org.openntf.red.network.rrpc.messages.Notes.Note.getDefaultInstance();
        }
      }
      /**
       * <code>optional .red.hooks.messages.Note note = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.openntf.red.network.rrpc.messages.Notes.Note, org.openntf.red.network.rrpc.messages.Notes.Note.Builder, org.openntf.red.network.rrpc.messages.Notes.NoteOrBuilder> 
          getNoteFieldBuilder() {
        if (noteBuilder_ == null) {
          if (!(payloadCase_ == 3)) {
            payload_ = org.openntf.red.network.rrpc.messages.Notes.Note.getDefaultInstance();
          }
          noteBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.openntf.red.network.rrpc.messages.Notes.Note, org.openntf.red.network.rrpc.messages.Notes.Note.Builder, org.openntf.red.network.rrpc.messages.Notes.NoteOrBuilder>(
                  (org.openntf.red.network.rrpc.messages.Notes.Note) payload_,
                  getParentForChildren(),
                  isClean());
          payload_ = null;
        }
        payloadCase_ = 3;
        onChanged();;
        return noteBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.openntf.red.network.rrpc.messages.Notes.NoteCollection, org.openntf.red.network.rrpc.messages.Notes.NoteCollection.Builder, org.openntf.red.network.rrpc.messages.Notes.NoteCollectionOrBuilder> ncollectionBuilder_;
      /**
       * <code>optional .red.hooks.messages.NoteCollection ncollection = 4;</code>
       */
      public org.openntf.red.network.rrpc.messages.Notes.NoteCollection getNcollection() {
        if (ncollectionBuilder_ == null) {
          if (payloadCase_ == 4) {
            return (org.openntf.red.network.rrpc.messages.Notes.NoteCollection) payload_;
          }
          return org.openntf.red.network.rrpc.messages.Notes.NoteCollection.getDefaultInstance();
        } else {
          if (payloadCase_ == 4) {
            return ncollectionBuilder_.getMessage();
          }
          return org.openntf.red.network.rrpc.messages.Notes.NoteCollection.getDefaultInstance();
        }
      }
      /**
       * <code>optional .red.hooks.messages.NoteCollection ncollection = 4;</code>
       */
      public Builder setNcollection(org.openntf.red.network.rrpc.messages.Notes.NoteCollection value) {
        if (ncollectionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          payload_ = value;
          onChanged();
        } else {
          ncollectionBuilder_.setMessage(value);
        }
        payloadCase_ = 4;
        return this;
      }
      /**
       * <code>optional .red.hooks.messages.NoteCollection ncollection = 4;</code>
       */
      public Builder setNcollection(
          org.openntf.red.network.rrpc.messages.Notes.NoteCollection.Builder builderForValue) {
        if (ncollectionBuilder_ == null) {
          payload_ = builderForValue.build();
          onChanged();
        } else {
          ncollectionBuilder_.setMessage(builderForValue.build());
        }
        payloadCase_ = 4;
        return this;
      }
      /**
       * <code>optional .red.hooks.messages.NoteCollection ncollection = 4;</code>
       */
      public Builder mergeNcollection(org.openntf.red.network.rrpc.messages.Notes.NoteCollection value) {
        if (ncollectionBuilder_ == null) {
          if (payloadCase_ == 4 &&
              payload_ != org.openntf.red.network.rrpc.messages.Notes.NoteCollection.getDefaultInstance()) {
            payload_ = org.openntf.red.network.rrpc.messages.Notes.NoteCollection.newBuilder((org.openntf.red.network.rrpc.messages.Notes.NoteCollection) payload_)
                .mergeFrom(value).buildPartial();
          } else {
            payload_ = value;
          }
          onChanged();
        } else {
          if (payloadCase_ == 4) {
            ncollectionBuilder_.mergeFrom(value);
          }
          ncollectionBuilder_.setMessage(value);
        }
        payloadCase_ = 4;
        return this;
      }
      /**
       * <code>optional .red.hooks.messages.NoteCollection ncollection = 4;</code>
       */
      public Builder clearNcollection() {
        if (ncollectionBuilder_ == null) {
          if (payloadCase_ == 4) {
            payloadCase_ = 0;
            payload_ = null;
            onChanged();
          }
        } else {
          if (payloadCase_ == 4) {
            payloadCase_ = 0;
            payload_ = null;
          }
          ncollectionBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .red.hooks.messages.NoteCollection ncollection = 4;</code>
       */
      public org.openntf.red.network.rrpc.messages.Notes.NoteCollection.Builder getNcollectionBuilder() {
        return getNcollectionFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .red.hooks.messages.NoteCollection ncollection = 4;</code>
       */
      public org.openntf.red.network.rrpc.messages.Notes.NoteCollectionOrBuilder getNcollectionOrBuilder() {
        if ((payloadCase_ == 4) && (ncollectionBuilder_ != null)) {
          return ncollectionBuilder_.getMessageOrBuilder();
        } else {
          if (payloadCase_ == 4) {
            return (org.openntf.red.network.rrpc.messages.Notes.NoteCollection) payload_;
          }
          return org.openntf.red.network.rrpc.messages.Notes.NoteCollection.getDefaultInstance();
        }
      }
      /**
       * <code>optional .red.hooks.messages.NoteCollection ncollection = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.openntf.red.network.rrpc.messages.Notes.NoteCollection, org.openntf.red.network.rrpc.messages.Notes.NoteCollection.Builder, org.openntf.red.network.rrpc.messages.Notes.NoteCollectionOrBuilder> 
          getNcollectionFieldBuilder() {
        if (ncollectionBuilder_ == null) {
          if (!(payloadCase_ == 4)) {
            payload_ = org.openntf.red.network.rrpc.messages.Notes.NoteCollection.getDefaultInstance();
          }
          ncollectionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.openntf.red.network.rrpc.messages.Notes.NoteCollection, org.openntf.red.network.rrpc.messages.Notes.NoteCollection.Builder, org.openntf.red.network.rrpc.messages.Notes.NoteCollectionOrBuilder>(
                  (org.openntf.red.network.rrpc.messages.Notes.NoteCollection) payload_,
                  getParentForChildren(),
                  isClean());
          payload_ = null;
        }
        payloadCase_ = 4;
        onChanged();;
        return ncollectionBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:red.hooks.messages.Response)
    }

    // @@protoc_insertion_point(class_scope:red.hooks.messages.Response)
    private static final org.openntf.red.network.rrpc.messages.Base.Response DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.openntf.red.network.rrpc.messages.Base.Response();
    }

    public static org.openntf.red.network.rrpc.messages.Base.Response getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Response>
        PARSER = new com.google.protobuf.AbstractParser<Response>() {
      public Response parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new Response(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Response> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Response> getParserForType() {
      return PARSER;
    }

    public org.openntf.red.network.rrpc.messages.Base.Response getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface RequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:red.hooks.messages.Request)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .red.hooks.messages.RequestNoteInfo noteInfo = 1;</code>
     */
    org.openntf.red.network.rrpc.messages.Notes.RequestNoteInfo getNoteInfo();
    /**
     * <code>optional .red.hooks.messages.RequestNoteInfo noteInfo = 1;</code>
     */
    org.openntf.red.network.rrpc.messages.Notes.RequestNoteInfoOrBuilder getNoteInfoOrBuilder();

    /**
     * <code>optional .red.hooks.messages.RequestNote note = 2;</code>
     */
    org.openntf.red.network.rrpc.messages.Notes.RequestNote getNote();
    /**
     * <code>optional .red.hooks.messages.RequestNote note = 2;</code>
     */
    org.openntf.red.network.rrpc.messages.Notes.RequestNoteOrBuilder getNoteOrBuilder();

    /**
     * <code>optional .red.hooks.messages.RequestNoteCollection ncollection = 3;</code>
     */
    org.openntf.red.network.rrpc.messages.Notes.RequestNoteCollection getNcollection();
    /**
     * <code>optional .red.hooks.messages.RequestNoteCollection ncollection = 3;</code>
     */
    org.openntf.red.network.rrpc.messages.Notes.RequestNoteCollectionOrBuilder getNcollectionOrBuilder();

    public org.openntf.red.network.rrpc.messages.Base.Request.PayloadCase getPayloadCase();
  }
  /**
   * Protobuf type {@code red.hooks.messages.Request}
   */
  public  static final class Request extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:red.hooks.messages.Request)
      RequestOrBuilder {
    // Use Request.newBuilder() to construct.
    private Request(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Request() {
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private Request(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.openntf.red.network.rrpc.messages.Notes.RequestNoteInfo.Builder subBuilder = null;
              if (payloadCase_ == 1) {
                subBuilder = ((org.openntf.red.network.rrpc.messages.Notes.RequestNoteInfo) payload_).toBuilder();
              }
              payload_ =
                  input.readMessage(org.openntf.red.network.rrpc.messages.Notes.RequestNoteInfo.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.openntf.red.network.rrpc.messages.Notes.RequestNoteInfo) payload_);
                payload_ = subBuilder.buildPartial();
              }
              payloadCase_ = 1;
              break;
            }
            case 18: {
              org.openntf.red.network.rrpc.messages.Notes.RequestNote.Builder subBuilder = null;
              if (payloadCase_ == 2) {
                subBuilder = ((org.openntf.red.network.rrpc.messages.Notes.RequestNote) payload_).toBuilder();
              }
              payload_ =
                  input.readMessage(org.openntf.red.network.rrpc.messages.Notes.RequestNote.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.openntf.red.network.rrpc.messages.Notes.RequestNote) payload_);
                payload_ = subBuilder.buildPartial();
              }
              payloadCase_ = 2;
              break;
            }
            case 26: {
              org.openntf.red.network.rrpc.messages.Notes.RequestNoteCollection.Builder subBuilder = null;
              if (payloadCase_ == 3) {
                subBuilder = ((org.openntf.red.network.rrpc.messages.Notes.RequestNoteCollection) payload_).toBuilder();
              }
              payload_ =
                  input.readMessage(org.openntf.red.network.rrpc.messages.Notes.RequestNoteCollection.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.openntf.red.network.rrpc.messages.Notes.RequestNoteCollection) payload_);
                payload_ = subBuilder.buildPartial();
              }
              payloadCase_ = 3;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.openntf.red.network.rrpc.messages.Base.internal_static_red_hooks_messages_Request_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.openntf.red.network.rrpc.messages.Base.internal_static_red_hooks_messages_Request_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.openntf.red.network.rrpc.messages.Base.Request.class, org.openntf.red.network.rrpc.messages.Base.Request.Builder.class);
    }

    private int payloadCase_ = 0;
    private java.lang.Object payload_;
    public enum PayloadCase
        implements com.google.protobuf.Internal.EnumLite {
      NOTEINFO(1),
      NOTE(2),
      NCOLLECTION(3),
      PAYLOAD_NOT_SET(0);
      private final int value;
      private PayloadCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static PayloadCase valueOf(int value) {
        return forNumber(value);
      }

      public static PayloadCase forNumber(int value) {
        switch (value) {
          case 1: return NOTEINFO;
          case 2: return NOTE;
          case 3: return NCOLLECTION;
          case 0: return PAYLOAD_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public PayloadCase
    getPayloadCase() {
      return PayloadCase.forNumber(
          payloadCase_);
    }

    public static final int NOTEINFO_FIELD_NUMBER = 1;
    /**
     * <code>optional .red.hooks.messages.RequestNoteInfo noteInfo = 1;</code>
     */
    public org.openntf.red.network.rrpc.messages.Notes.RequestNoteInfo getNoteInfo() {
      if (payloadCase_ == 1) {
         return (org.openntf.red.network.rrpc.messages.Notes.RequestNoteInfo) payload_;
      }
      return org.openntf.red.network.rrpc.messages.Notes.RequestNoteInfo.getDefaultInstance();
    }
    /**
     * <code>optional .red.hooks.messages.RequestNoteInfo noteInfo = 1;</code>
     */
    public org.openntf.red.network.rrpc.messages.Notes.RequestNoteInfoOrBuilder getNoteInfoOrBuilder() {
      if (payloadCase_ == 1) {
         return (org.openntf.red.network.rrpc.messages.Notes.RequestNoteInfo) payload_;
      }
      return org.openntf.red.network.rrpc.messages.Notes.RequestNoteInfo.getDefaultInstance();
    }

    public static final int NOTE_FIELD_NUMBER = 2;
    /**
     * <code>optional .red.hooks.messages.RequestNote note = 2;</code>
     */
    public org.openntf.red.network.rrpc.messages.Notes.RequestNote getNote() {
      if (payloadCase_ == 2) {
         return (org.openntf.red.network.rrpc.messages.Notes.RequestNote) payload_;
      }
      return org.openntf.red.network.rrpc.messages.Notes.RequestNote.getDefaultInstance();
    }
    /**
     * <code>optional .red.hooks.messages.RequestNote note = 2;</code>
     */
    public org.openntf.red.network.rrpc.messages.Notes.RequestNoteOrBuilder getNoteOrBuilder() {
      if (payloadCase_ == 2) {
         return (org.openntf.red.network.rrpc.messages.Notes.RequestNote) payload_;
      }
      return org.openntf.red.network.rrpc.messages.Notes.RequestNote.getDefaultInstance();
    }

    public static final int NCOLLECTION_FIELD_NUMBER = 3;
    /**
     * <code>optional .red.hooks.messages.RequestNoteCollection ncollection = 3;</code>
     */
    public org.openntf.red.network.rrpc.messages.Notes.RequestNoteCollection getNcollection() {
      if (payloadCase_ == 3) {
         return (org.openntf.red.network.rrpc.messages.Notes.RequestNoteCollection) payload_;
      }
      return org.openntf.red.network.rrpc.messages.Notes.RequestNoteCollection.getDefaultInstance();
    }
    /**
     * <code>optional .red.hooks.messages.RequestNoteCollection ncollection = 3;</code>
     */
    public org.openntf.red.network.rrpc.messages.Notes.RequestNoteCollectionOrBuilder getNcollectionOrBuilder() {
      if (payloadCase_ == 3) {
         return (org.openntf.red.network.rrpc.messages.Notes.RequestNoteCollection) payload_;
      }
      return org.openntf.red.network.rrpc.messages.Notes.RequestNoteCollection.getDefaultInstance();
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (payloadCase_ == 1) {
        output.writeMessage(1, (org.openntf.red.network.rrpc.messages.Notes.RequestNoteInfo) payload_);
      }
      if (payloadCase_ == 2) {
        output.writeMessage(2, (org.openntf.red.network.rrpc.messages.Notes.RequestNote) payload_);
      }
      if (payloadCase_ == 3) {
        output.writeMessage(3, (org.openntf.red.network.rrpc.messages.Notes.RequestNoteCollection) payload_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (payloadCase_ == 1) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, (org.openntf.red.network.rrpc.messages.Notes.RequestNoteInfo) payload_);
      }
      if (payloadCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, (org.openntf.red.network.rrpc.messages.Notes.RequestNote) payload_);
      }
      if (payloadCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, (org.openntf.red.network.rrpc.messages.Notes.RequestNoteCollection) payload_);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.openntf.red.network.rrpc.messages.Base.Request)) {
        return super.equals(obj);
      }
      org.openntf.red.network.rrpc.messages.Base.Request other = (org.openntf.red.network.rrpc.messages.Base.Request) obj;

      boolean result = true;
      result = result && getPayloadCase().equals(
          other.getPayloadCase());
      if (!result) return false;
      switch (payloadCase_) {
        case 1:
          result = result && getNoteInfo()
              .equals(other.getNoteInfo());
          break;
        case 2:
          result = result && getNote()
              .equals(other.getNote());
          break;
        case 3:
          result = result && getNcollection()
              .equals(other.getNcollection());
          break;
        case 0:
        default:
      }
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      switch (payloadCase_) {
        case 1:
          hash = (37 * hash) + NOTEINFO_FIELD_NUMBER;
          hash = (53 * hash) + getNoteInfo().hashCode();
          break;
        case 2:
          hash = (37 * hash) + NOTE_FIELD_NUMBER;
          hash = (53 * hash) + getNote().hashCode();
          break;
        case 3:
          hash = (37 * hash) + NCOLLECTION_FIELD_NUMBER;
          hash = (53 * hash) + getNcollection().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.openntf.red.network.rrpc.messages.Base.Request parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.openntf.red.network.rrpc.messages.Base.Request parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.openntf.red.network.rrpc.messages.Base.Request parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.openntf.red.network.rrpc.messages.Base.Request parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.openntf.red.network.rrpc.messages.Base.Request parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.openntf.red.network.rrpc.messages.Base.Request parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.openntf.red.network.rrpc.messages.Base.Request parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.openntf.red.network.rrpc.messages.Base.Request parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.openntf.red.network.rrpc.messages.Base.Request parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.openntf.red.network.rrpc.messages.Base.Request parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.openntf.red.network.rrpc.messages.Base.Request prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code red.hooks.messages.Request}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:red.hooks.messages.Request)
        org.openntf.red.network.rrpc.messages.Base.RequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.openntf.red.network.rrpc.messages.Base.internal_static_red_hooks_messages_Request_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.openntf.red.network.rrpc.messages.Base.internal_static_red_hooks_messages_Request_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.openntf.red.network.rrpc.messages.Base.Request.class, org.openntf.red.network.rrpc.messages.Base.Request.Builder.class);
      }

      // Construct using org.openntf.red.network.messages.Base.Request.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        payloadCase_ = 0;
        payload_ = null;
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.openntf.red.network.rrpc.messages.Base.internal_static_red_hooks_messages_Request_descriptor;
      }

      public org.openntf.red.network.rrpc.messages.Base.Request getDefaultInstanceForType() {
        return org.openntf.red.network.rrpc.messages.Base.Request.getDefaultInstance();
      }

      public org.openntf.red.network.rrpc.messages.Base.Request build() {
        org.openntf.red.network.rrpc.messages.Base.Request result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.openntf.red.network.rrpc.messages.Base.Request buildPartial() {
        org.openntf.red.network.rrpc.messages.Base.Request result = new org.openntf.red.network.rrpc.messages.Base.Request(this);
        if (payloadCase_ == 1) {
          if (noteInfoBuilder_ == null) {
            result.payload_ = payload_;
          } else {
            result.payload_ = noteInfoBuilder_.build();
          }
        }
        if (payloadCase_ == 2) {
          if (noteBuilder_ == null) {
            result.payload_ = payload_;
          } else {
            result.payload_ = noteBuilder_.build();
          }
        }
        if (payloadCase_ == 3) {
          if (ncollectionBuilder_ == null) {
            result.payload_ = payload_;
          } else {
            result.payload_ = ncollectionBuilder_.build();
          }
        }
        result.payloadCase_ = payloadCase_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.openntf.red.network.rrpc.messages.Base.Request) {
          return mergeFrom((org.openntf.red.network.rrpc.messages.Base.Request)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.openntf.red.network.rrpc.messages.Base.Request other) {
        if (other == org.openntf.red.network.rrpc.messages.Base.Request.getDefaultInstance()) return this;
        switch (other.getPayloadCase()) {
          case NOTEINFO: {
            mergeNoteInfo(other.getNoteInfo());
            break;
          }
          case NOTE: {
            mergeNote(other.getNote());
            break;
          }
          case NCOLLECTION: {
            mergeNcollection(other.getNcollection());
            break;
          }
          case PAYLOAD_NOT_SET: {
            break;
          }
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.openntf.red.network.rrpc.messages.Base.Request parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.openntf.red.network.rrpc.messages.Base.Request) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int payloadCase_ = 0;
      private java.lang.Object payload_;
      public PayloadCase
          getPayloadCase() {
        return PayloadCase.forNumber(
            payloadCase_);
      }

      public Builder clearPayload() {
        payloadCase_ = 0;
        payload_ = null;
        onChanged();
        return this;
      }


      private com.google.protobuf.SingleFieldBuilderV3<
          org.openntf.red.network.rrpc.messages.Notes.RequestNoteInfo, org.openntf.red.network.rrpc.messages.Notes.RequestNoteInfo.Builder, org.openntf.red.network.rrpc.messages.Notes.RequestNoteInfoOrBuilder> noteInfoBuilder_;
      /**
       * <code>optional .red.hooks.messages.RequestNoteInfo noteInfo = 1;</code>
       */
      public org.openntf.red.network.rrpc.messages.Notes.RequestNoteInfo getNoteInfo() {
        if (noteInfoBuilder_ == null) {
          if (payloadCase_ == 1) {
            return (org.openntf.red.network.rrpc.messages.Notes.RequestNoteInfo) payload_;
          }
          return org.openntf.red.network.rrpc.messages.Notes.RequestNoteInfo.getDefaultInstance();
        } else {
          if (payloadCase_ == 1) {
            return noteInfoBuilder_.getMessage();
          }
          return org.openntf.red.network.rrpc.messages.Notes.RequestNoteInfo.getDefaultInstance();
        }
      }
      /**
       * <code>optional .red.hooks.messages.RequestNoteInfo noteInfo = 1;</code>
       */
      public Builder setNoteInfo(org.openntf.red.network.rrpc.messages.Notes.RequestNoteInfo value) {
        if (noteInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          payload_ = value;
          onChanged();
        } else {
          noteInfoBuilder_.setMessage(value);
        }
        payloadCase_ = 1;
        return this;
      }
      /**
       * <code>optional .red.hooks.messages.RequestNoteInfo noteInfo = 1;</code>
       */
      public Builder setNoteInfo(
          org.openntf.red.network.rrpc.messages.Notes.RequestNoteInfo.Builder builderForValue) {
        if (noteInfoBuilder_ == null) {
          payload_ = builderForValue.build();
          onChanged();
        } else {
          noteInfoBuilder_.setMessage(builderForValue.build());
        }
        payloadCase_ = 1;
        return this;
      }
      /**
       * <code>optional .red.hooks.messages.RequestNoteInfo noteInfo = 1;</code>
       */
      public Builder mergeNoteInfo(org.openntf.red.network.rrpc.messages.Notes.RequestNoteInfo value) {
        if (noteInfoBuilder_ == null) {
          if (payloadCase_ == 1 &&
              payload_ != org.openntf.red.network.rrpc.messages.Notes.RequestNoteInfo.getDefaultInstance()) {
            payload_ = org.openntf.red.network.rrpc.messages.Notes.RequestNoteInfo.newBuilder((org.openntf.red.network.rrpc.messages.Notes.RequestNoteInfo) payload_)
                .mergeFrom(value).buildPartial();
          } else {
            payload_ = value;
          }
          onChanged();
        } else {
          if (payloadCase_ == 1) {
            noteInfoBuilder_.mergeFrom(value);
          }
          noteInfoBuilder_.setMessage(value);
        }
        payloadCase_ = 1;
        return this;
      }
      /**
       * <code>optional .red.hooks.messages.RequestNoteInfo noteInfo = 1;</code>
       */
      public Builder clearNoteInfo() {
        if (noteInfoBuilder_ == null) {
          if (payloadCase_ == 1) {
            payloadCase_ = 0;
            payload_ = null;
            onChanged();
          }
        } else {
          if (payloadCase_ == 1) {
            payloadCase_ = 0;
            payload_ = null;
          }
          noteInfoBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .red.hooks.messages.RequestNoteInfo noteInfo = 1;</code>
       */
      public org.openntf.red.network.rrpc.messages.Notes.RequestNoteInfo.Builder getNoteInfoBuilder() {
        return getNoteInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .red.hooks.messages.RequestNoteInfo noteInfo = 1;</code>
       */
      public org.openntf.red.network.rrpc.messages.Notes.RequestNoteInfoOrBuilder getNoteInfoOrBuilder() {
        if ((payloadCase_ == 1) && (noteInfoBuilder_ != null)) {
          return noteInfoBuilder_.getMessageOrBuilder();
        } else {
          if (payloadCase_ == 1) {
            return (org.openntf.red.network.rrpc.messages.Notes.RequestNoteInfo) payload_;
          }
          return org.openntf.red.network.rrpc.messages.Notes.RequestNoteInfo.getDefaultInstance();
        }
      }
      /**
       * <code>optional .red.hooks.messages.RequestNoteInfo noteInfo = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.openntf.red.network.rrpc.messages.Notes.RequestNoteInfo, org.openntf.red.network.rrpc.messages.Notes.RequestNoteInfo.Builder, org.openntf.red.network.rrpc.messages.Notes.RequestNoteInfoOrBuilder> 
          getNoteInfoFieldBuilder() {
        if (noteInfoBuilder_ == null) {
          if (!(payloadCase_ == 1)) {
            payload_ = org.openntf.red.network.rrpc.messages.Notes.RequestNoteInfo.getDefaultInstance();
          }
          noteInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.openntf.red.network.rrpc.messages.Notes.RequestNoteInfo, org.openntf.red.network.rrpc.messages.Notes.RequestNoteInfo.Builder, org.openntf.red.network.rrpc.messages.Notes.RequestNoteInfoOrBuilder>(
                  (org.openntf.red.network.rrpc.messages.Notes.RequestNoteInfo) payload_,
                  getParentForChildren(),
                  isClean());
          payload_ = null;
        }
        payloadCase_ = 1;
        onChanged();;
        return noteInfoBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.openntf.red.network.rrpc.messages.Notes.RequestNote, org.openntf.red.network.rrpc.messages.Notes.RequestNote.Builder, org.openntf.red.network.rrpc.messages.Notes.RequestNoteOrBuilder> noteBuilder_;
      /**
       * <code>optional .red.hooks.messages.RequestNote note = 2;</code>
       */
      public org.openntf.red.network.rrpc.messages.Notes.RequestNote getNote() {
        if (noteBuilder_ == null) {
          if (payloadCase_ == 2) {
            return (org.openntf.red.network.rrpc.messages.Notes.RequestNote) payload_;
          }
          return org.openntf.red.network.rrpc.messages.Notes.RequestNote.getDefaultInstance();
        } else {
          if (payloadCase_ == 2) {
            return noteBuilder_.getMessage();
          }
          return org.openntf.red.network.rrpc.messages.Notes.RequestNote.getDefaultInstance();
        }
      }
      /**
       * <code>optional .red.hooks.messages.RequestNote note = 2;</code>
       */
      public Builder setNote(org.openntf.red.network.rrpc.messages.Notes.RequestNote value) {
        if (noteBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          payload_ = value;
          onChanged();
        } else {
          noteBuilder_.setMessage(value);
        }
        payloadCase_ = 2;
        return this;
      }
      /**
       * <code>optional .red.hooks.messages.RequestNote note = 2;</code>
       */
      public Builder setNote(
          org.openntf.red.network.rrpc.messages.Notes.RequestNote.Builder builderForValue) {
        if (noteBuilder_ == null) {
          payload_ = builderForValue.build();
          onChanged();
        } else {
          noteBuilder_.setMessage(builderForValue.build());
        }
        payloadCase_ = 2;
        return this;
      }
      /**
       * <code>optional .red.hooks.messages.RequestNote note = 2;</code>
       */
      public Builder mergeNote(org.openntf.red.network.rrpc.messages.Notes.RequestNote value) {
        if (noteBuilder_ == null) {
          if (payloadCase_ == 2 &&
              payload_ != org.openntf.red.network.rrpc.messages.Notes.RequestNote.getDefaultInstance()) {
            payload_ = org.openntf.red.network.rrpc.messages.Notes.RequestNote.newBuilder((org.openntf.red.network.rrpc.messages.Notes.RequestNote) payload_)
                .mergeFrom(value).buildPartial();
          } else {
            payload_ = value;
          }
          onChanged();
        } else {
          if (payloadCase_ == 2) {
            noteBuilder_.mergeFrom(value);
          }
          noteBuilder_.setMessage(value);
        }
        payloadCase_ = 2;
        return this;
      }
      /**
       * <code>optional .red.hooks.messages.RequestNote note = 2;</code>
       */
      public Builder clearNote() {
        if (noteBuilder_ == null) {
          if (payloadCase_ == 2) {
            payloadCase_ = 0;
            payload_ = null;
            onChanged();
          }
        } else {
          if (payloadCase_ == 2) {
            payloadCase_ = 0;
            payload_ = null;
          }
          noteBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .red.hooks.messages.RequestNote note = 2;</code>
       */
      public org.openntf.red.network.rrpc.messages.Notes.RequestNote.Builder getNoteBuilder() {
        return getNoteFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .red.hooks.messages.RequestNote note = 2;</code>
       */
      public org.openntf.red.network.rrpc.messages.Notes.RequestNoteOrBuilder getNoteOrBuilder() {
        if ((payloadCase_ == 2) && (noteBuilder_ != null)) {
          return noteBuilder_.getMessageOrBuilder();
        } else {
          if (payloadCase_ == 2) {
            return (org.openntf.red.network.rrpc.messages.Notes.RequestNote) payload_;
          }
          return org.openntf.red.network.rrpc.messages.Notes.RequestNote.getDefaultInstance();
        }
      }
      /**
       * <code>optional .red.hooks.messages.RequestNote note = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.openntf.red.network.rrpc.messages.Notes.RequestNote, org.openntf.red.network.rrpc.messages.Notes.RequestNote.Builder, org.openntf.red.network.rrpc.messages.Notes.RequestNoteOrBuilder> 
          getNoteFieldBuilder() {
        if (noteBuilder_ == null) {
          if (!(payloadCase_ == 2)) {
            payload_ = org.openntf.red.network.rrpc.messages.Notes.RequestNote.getDefaultInstance();
          }
          noteBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.openntf.red.network.rrpc.messages.Notes.RequestNote, org.openntf.red.network.rrpc.messages.Notes.RequestNote.Builder, org.openntf.red.network.rrpc.messages.Notes.RequestNoteOrBuilder>(
                  (org.openntf.red.network.rrpc.messages.Notes.RequestNote) payload_,
                  getParentForChildren(),
                  isClean());
          payload_ = null;
        }
        payloadCase_ = 2;
        onChanged();;
        return noteBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.openntf.red.network.rrpc.messages.Notes.RequestNoteCollection, org.openntf.red.network.rrpc.messages.Notes.RequestNoteCollection.Builder, org.openntf.red.network.rrpc.messages.Notes.RequestNoteCollectionOrBuilder> ncollectionBuilder_;
      /**
       * <code>optional .red.hooks.messages.RequestNoteCollection ncollection = 3;</code>
       */
      public org.openntf.red.network.rrpc.messages.Notes.RequestNoteCollection getNcollection() {
        if (ncollectionBuilder_ == null) {
          if (payloadCase_ == 3) {
            return (org.openntf.red.network.rrpc.messages.Notes.RequestNoteCollection) payload_;
          }
          return org.openntf.red.network.rrpc.messages.Notes.RequestNoteCollection.getDefaultInstance();
        } else {
          if (payloadCase_ == 3) {
            return ncollectionBuilder_.getMessage();
          }
          return org.openntf.red.network.rrpc.messages.Notes.RequestNoteCollection.getDefaultInstance();
        }
      }
      /**
       * <code>optional .red.hooks.messages.RequestNoteCollection ncollection = 3;</code>
       */
      public Builder setNcollection(org.openntf.red.network.rrpc.messages.Notes.RequestNoteCollection value) {
        if (ncollectionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          payload_ = value;
          onChanged();
        } else {
          ncollectionBuilder_.setMessage(value);
        }
        payloadCase_ = 3;
        return this;
      }
      /**
       * <code>optional .red.hooks.messages.RequestNoteCollection ncollection = 3;</code>
       */
      public Builder setNcollection(
          org.openntf.red.network.rrpc.messages.Notes.RequestNoteCollection.Builder builderForValue) {
        if (ncollectionBuilder_ == null) {
          payload_ = builderForValue.build();
          onChanged();
        } else {
          ncollectionBuilder_.setMessage(builderForValue.build());
        }
        payloadCase_ = 3;
        return this;
      }
      /**
       * <code>optional .red.hooks.messages.RequestNoteCollection ncollection = 3;</code>
       */
      public Builder mergeNcollection(org.openntf.red.network.rrpc.messages.Notes.RequestNoteCollection value) {
        if (ncollectionBuilder_ == null) {
          if (payloadCase_ == 3 &&
              payload_ != org.openntf.red.network.rrpc.messages.Notes.RequestNoteCollection.getDefaultInstance()) {
            payload_ = org.openntf.red.network.rrpc.messages.Notes.RequestNoteCollection.newBuilder((org.openntf.red.network.rrpc.messages.Notes.RequestNoteCollection) payload_)
                .mergeFrom(value).buildPartial();
          } else {
            payload_ = value;
          }
          onChanged();
        } else {
          if (payloadCase_ == 3) {
            ncollectionBuilder_.mergeFrom(value);
          }
          ncollectionBuilder_.setMessage(value);
        }
        payloadCase_ = 3;
        return this;
      }
      /**
       * <code>optional .red.hooks.messages.RequestNoteCollection ncollection = 3;</code>
       */
      public Builder clearNcollection() {
        if (ncollectionBuilder_ == null) {
          if (payloadCase_ == 3) {
            payloadCase_ = 0;
            payload_ = null;
            onChanged();
          }
        } else {
          if (payloadCase_ == 3) {
            payloadCase_ = 0;
            payload_ = null;
          }
          ncollectionBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .red.hooks.messages.RequestNoteCollection ncollection = 3;</code>
       */
      public org.openntf.red.network.rrpc.messages.Notes.RequestNoteCollection.Builder getNcollectionBuilder() {
        return getNcollectionFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .red.hooks.messages.RequestNoteCollection ncollection = 3;</code>
       */
      public org.openntf.red.network.rrpc.messages.Notes.RequestNoteCollectionOrBuilder getNcollectionOrBuilder() {
        if ((payloadCase_ == 3) && (ncollectionBuilder_ != null)) {
          return ncollectionBuilder_.getMessageOrBuilder();
        } else {
          if (payloadCase_ == 3) {
            return (org.openntf.red.network.rrpc.messages.Notes.RequestNoteCollection) payload_;
          }
          return org.openntf.red.network.rrpc.messages.Notes.RequestNoteCollection.getDefaultInstance();
        }
      }
      /**
       * <code>optional .red.hooks.messages.RequestNoteCollection ncollection = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.openntf.red.network.rrpc.messages.Notes.RequestNoteCollection, org.openntf.red.network.rrpc.messages.Notes.RequestNoteCollection.Builder, org.openntf.red.network.rrpc.messages.Notes.RequestNoteCollectionOrBuilder> 
          getNcollectionFieldBuilder() {
        if (ncollectionBuilder_ == null) {
          if (!(payloadCase_ == 3)) {
            payload_ = org.openntf.red.network.rrpc.messages.Notes.RequestNoteCollection.getDefaultInstance();
          }
          ncollectionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.openntf.red.network.rrpc.messages.Notes.RequestNoteCollection, org.openntf.red.network.rrpc.messages.Notes.RequestNoteCollection.Builder, org.openntf.red.network.rrpc.messages.Notes.RequestNoteCollectionOrBuilder>(
                  (org.openntf.red.network.rrpc.messages.Notes.RequestNoteCollection) payload_,
                  getParentForChildren(),
                  isClean());
          payload_ = null;
        }
        payloadCase_ = 3;
        onChanged();;
        return ncollectionBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:red.hooks.messages.Request)
    }

    // @@protoc_insertion_point(class_scope:red.hooks.messages.Request)
    private static final org.openntf.red.network.rrpc.messages.Base.Request DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.openntf.red.network.rrpc.messages.Base.Request();
    }

    public static org.openntf.red.network.rrpc.messages.Base.Request getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Request>
        PARSER = new com.google.protobuf.AbstractParser<Request>() {
      public Request parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new Request(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Request> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Request> getParserForType() {
      return PARSER;
    }

    public org.openntf.red.network.rrpc.messages.Base.Request getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_red_hooks_messages_Response_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_red_hooks_messages_Response_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_red_hooks_messages_Request_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_red_hooks_messages_Request_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\nbase.proto\022\022red.hooks.messages\032\013notes." +
      "proto\"\302\001\n\010Response\022\016\n\006status\030\001 \001(\r\0220\n\010no" +
      "teInfo\030\002 \001(\0132\034.red.hooks.messages.NoteIn" +
      "foH\000\022(\n\004note\030\003 \001(\0132\030.red.hooks.messages." +
      "NoteH\000\0229\n\013ncollection\030\004 \001(\0132\".red.hooks." +
      "messages.NoteCollectionH\000B\t\n\007payloadJ\004\010\005" +
      "\020e\"\306\001\n\007Request\0227\n\010noteInfo\030\001 \001(\0132#.red.h" +
      "ooks.messages.RequestNoteInfoH\000\022/\n\004note\030" +
      "\002 \001(\0132\037.red.hooks.messages.RequestNoteH\000" +
      "\022@\n\013ncollection\030\003 \001(\0132).red.hooks.messag",
      "es.RequestNoteCollectionH\000B\t\n\007payloadJ\004\010" +
      "\004\020eB%\n org.openntf.red.network.messages\370" +
      "\001\001b\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          org.openntf.red.network.rrpc.messages.Notes.getDescriptor(),
        }, assigner);
    internal_static_red_hooks_messages_Response_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_red_hooks_messages_Response_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_red_hooks_messages_Response_descriptor,
        new java.lang.String[] { "Status", "NoteInfo", "Note", "Ncollection", "Payload", });
    internal_static_red_hooks_messages_Request_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_red_hooks_messages_Request_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_red_hooks_messages_Request_descriptor,
        new java.lang.String[] { "NoteInfo", "Note", "Ncollection", "Payload", });
    org.openntf.red.network.rrpc.messages.Notes.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
