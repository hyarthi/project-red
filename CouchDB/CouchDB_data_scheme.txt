This is what's running so far.

NOTICE:
CouchDB v.2.0.0+ is REQUIRED!!!

--------
Document
--------

{
	_id: <UNID equiv - Couch internal - can substitute for UNID>,
	_rev: <revision - Couch internal>,
	<field_name_1>: {
		_value: <field_value>,
		_type: <field_type - Integer - Lotus Item-type based>,
		_flags: <field_flags - Integer - bit-wise encoded>
	},
	<field_name_2>: { ... }
	RED_noteid: <Note ID - Integer - TEMPORARY: replacement for Note ID within Domino>
}

DOCUMENT NOTES:
- $Ref, $Conflict and Form field names are taken. Same thing will happen for all other Notes system fields.
- Need to figure out mechanism for spawning Note IDs, so that it corresponds with Domino's Note ID spawning algorithm.

--------
DateTime
--------
stored as JSON objects

{
	_value: <String representation of date - format: YYYY-MM-DD-HH-mm-ss-nnn (n - millisecond) - better for alphabetic sorting>,
	_tz: <time zone index - int - ...>,
	_dtonly: <boolean - whether time should be disregarded - by default time of day is set to 00:00:00.000>,
	_tmonly: <boolean - whether date should be disregarded - by default date is set to 31.12.9999>
}

DATETIME NOTES:
- maybe merge _dtonly & _tmonly into 1 flag field - will this be more efficient in terms of space? - need to investigate

-----
Views
-----

View design docs
----------------
NOTICE:
Due to introduction of Mango Query in CouchDB v.2.0 this section is being reworked.
Mango Query will be used for easier view construction.

Stored as Couch design docs. MUST have the prefix _view_ in their id. Stored under their program names.

{
	_id: "_design/_view_<view_name>",
	_rev: <revision - Couch internal>,
	language: "javascript", //Couch internal
	views: {	//defined by CouchDB strictly
		<view_name>: {
			map: <Couch map function - see rules below>,
			reduce: <Couch reduce function - see rules below>
		}
	},
	name: {
		_prog: <program view name>,
		...
	},
	columns: {
		0: {
			_name: <first column name>,
			_label: <first column label (human name)>,
			_type: <first column data type - int - Lotus Item-type based - can only be 1 of the following: TEXT (for String data type), NUMBERS (for Double data type), DATETIMES (for DateTime and DateRange data types)>,
			_key: <boolean - whether the column is sorted>,
			_category: <boolean - whether the column is categorized>
		}
	}
}

VIEW DESIGN NOTES:
- Rules for map/reduce functions:
	- if a column is sorted, it's value has to be emitted within the key part
	- _id field MUST be emitted in the key part
	- if any columns are categorized, each doc in the map function MUST emit N + 1 times, where N is the number of categorized columns. Each categorized column MUST be emitted in the key and in the value parts. All non-categorized columns MUST be emitted in the values only in the last emit. _id field in the key part value MUST be emitted only in the last emit - all other emits MUST specify null for the _id key.
	- reduce function SHOULD be used only (and MUST be used) for categorized views and be of the form (mey be changed in the future):
		function (values, rereduce) {
			return values[0];
		}
	- for categorized views all emits MUST have the _category boolean value emitted to show whether the entry is a category or not
	- a view may emit only 5 types of data within the column values: String, Double, DateTime JSON object (see above), DateRange JSON object, or an array of the above types. Arrays may not contain disparate data types.
	- if DateTime data type is used as key, it MUST be converted to a string representation (see above) of the UTC time and fed into the key as a simple string.
- If a view is categorized a query to it MUST have group=true query parameter. Otherwise the view will be flooded with category entries.




MISC NOTES:
- think what to do with reverse sorting in views
- perhaps it would be more versatile to do view categorization on View/ViewEntryCollection level of API - need to investigate
- perhaps there is a way to use reduce function more productively - need to investigate